type TokenIdentifier = nat64;
type Error = text;

type MetadataAttribute = record {
    trait_type: text;
    value: text;
};

type TokenMetadata = record {
    name: text;
    description: opt text;
    image: opt text;
    attributes: vec MetadataAttribute;
};

type InteractionRecord = record {
    timestamp: nat64;
    message: text;
};

type NFTPersonality = record {
    traits: vec record { text; float64; };
    memories: vec record {
        timestamp: nat64;
        content: text;
        emotional_impact: float64;
    };
    emotional_state: record {
        current_emotion: text;
        intensity: float64;
        duration: nat64;
    };
    developmental_stage: variant {
        Nascent;
        Awakening;
        Conscious;
        SelfAware;
        Transcendent;
    };
};

type AnimaToken = record {
    id: TokenIdentifier;
    owner: principal;
    name: text;
    creation_time: nat64;
    last_interaction: nat64;
    metadata: opt TokenMetadata;
    personality: NFTPersonality;
    interaction_history: vec InteractionRecord;
    level: nat32;
    growth_points: nat64;
    autonomous_mode: bool;
};

service : {
    create_anima: (text) -> (variant { Ok: principal; Err: Error; });
    get_user_animas: (principal) -> (vec AnimaToken) query;
    get_anima: (TokenIdentifier) -> (opt AnimaToken) query;
    transfer_anima: (principal, TokenIdentifier) -> (variant { Ok; Err: Error; });
}