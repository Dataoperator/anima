{"version":3,"file":"CyberpunkQuantumVault-CmYNCrrB.js","sources":["../../node_modules/lucide-react/dist/esm/icons/key.mjs","../../node_modules/lucide-react/dist/esm/icons/shield.mjs","../../node_modules/lucide-react/dist/esm/icons/sparkles.mjs","../../src/components/ui/DataStream.tsx","../../src/components/ui/CyberGlowText.tsx","../../src/hooks/useFieldState.ts","../../src/services/anima-actor.service.ts","../../src/services/quantum-state.service.ts","../../src/services/wallet.service.ts","../../src/components/quantum-vault/CyberpunkQuantumVault.tsx"],"sourcesContent":["/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Key = createLucideIcon(\"Key\", [\n  [\"circle\", { cx: \"7.5\", cy: \"15.5\", r: \"5.5\", key: \"yqb3hr\" }],\n  [\"path\", { d: \"m21 2-9.6 9.6\", key: \"1j0ho8\" }],\n  [\"path\", { d: \"m15.5 7.5 3 3L22 7l-3-3\", key: \"1rn1fs\" }]\n]);\n\nexport { Key as default };\n//# sourceMappingURL=key.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Shield = createLucideIcon(\"Shield\", [\n  [\"path\", { d: \"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z\", key: \"3xmgem\" }]\n]);\n\nexport { Shield as default };\n//# sourceMappingURL=shield.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Sparkles = createLucideIcon(\"Sparkles\", [\n  [\n    \"path\",\n    {\n      d: \"m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z\",\n      key: \"17u4zn\"\n    }\n  ],\n  [\"path\", { d: \"M5 3v4\", key: \"bklmnn\" }],\n  [\"path\", { d: \"M19 17v4\", key: \"iiml17\" }],\n  [\"path\", { d: \"M3 5h4\", key: \"nem4j1\" }],\n  [\"path\", { d: \"M17 19h4\", key: \"lbex7p\" }]\n]);\n\nexport { Sparkles as default };\n//# sourceMappingURL=sparkles.mjs.map\n","import React, { useEffect, useRef } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface DataStreamProps {\n  intensity: number;\n  color: string;\n}\n\nexport const DataStream: React.FC<DataStreamProps> = ({ intensity, color }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    canvas.width = canvas.clientWidth * window.devicePixelRatio;\n    canvas.height = canvas.clientHeight * window.devicePixelRatio;\n\n    const columns = Math.floor(canvas.width / 20);\n    const drops: number[] = new Array(columns).fill(0);\n\n    const getRandomChar = () => {\n      const chars = '01アイウエオカキクケコサシスセソタチツテトナニヌネノ';\n      return chars[Math.floor(Math.random() * chars.length)];\n    };\n\n    let animationFrameId: number;\n\n    const draw = () => {\n      ctx.fillStyle = `rgba(0, 0, 0, ${0.1 - intensity * 0.05})`;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      ctx.fillStyle = color;\n      ctx.font = '15px monospace';\n\n      for (let i = 0; i < drops.length; i++) {\n        const text = getRandomChar();\n        const x = i * 20;\n        const y = drops[i] * 20;\n\n        ctx.fillText(text, x, y);\n\n        if (y > canvas.height && Math.random() > 0.975) {\n          drops[i] = 0;\n        }\n\n        drops[i]++;\n      }\n\n      animationFrameId = requestAnimationFrame(draw);\n    };\n\n    draw();\n\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [intensity, color]);\n\n  return (\n    <motion.div \n      className=\"w-full h-full\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n    >\n      <canvas\n        ref={canvasRef}\n        className=\"w-full h-full\"\n        style={{ \n          filter: `blur(0.5px) brightness(${1 + intensity * 0.5})`,\n          opacity: 0.8 + intensity * 0.2\n        }}\n      />\n    </motion.div>\n  );\n};","import React from 'react';\nimport { motion } from 'framer-motion';\n\ninterface CyberGlowTextProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const CyberGlowText: React.FC<CyberGlowTextProps> = ({ children, className = '' }) => {\n  return (\n    <motion.div\n      className={`relative ${className}`}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <div className=\"relative z-10\">\n        {children}\n      </div>\n      <motion.div \n        className=\"absolute inset-0 -z-10 blur-lg opacity-50\"\n        animate={{\n          opacity: [0.3, 0.5, 0.3],\n          scale: [1, 1.05, 1],\n        }}\n        transition={{\n          duration: 2,\n          repeat: Infinity,\n          ease: \"easeInOut\"\n        }}\n        style={{ \n          background: 'radial-gradient(circle at center, var(--quantum-primary), transparent 70%)',\n        }}\n      />\n      <div \n        className=\"absolute inset-0 -z-20\"\n        style={{ \n          background: 'linear-gradient(45deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.1))',\n          filter: 'blur(20px)',\n        }}\n      />\n    </motion.div>\n  );\n};","import { useState, useEffect } from 'react';\n\ninterface FieldState {\n  fieldStrength: number;\n  resonanceFrequency: number;\n  harmonicIndex: number;\n  fieldSignature: string;\n}\n\nexport const useFieldState = () => {\n  const [state, setState] = useState<FieldState>({\n    fieldStrength: 0,\n    resonanceFrequency: 0,\n    harmonicIndex: 0,\n    fieldSignature: ''\n  });\n\n  useEffect(() => {\n    let mounted = true;\n    let intervalId: NodeJS.Timeout;\n\n    const updateFieldState = () => {\n      if (!mounted) return;\n\n      const fieldStrength = 0.3 + Math.random() * 0.4;\n      const resonanceFrequency = Math.random();\n      \n      setState({\n        fieldStrength,\n        resonanceFrequency,\n        harmonicIndex: Math.random(),\n        fieldSignature: Math.random().toString(36).substring(2)\n      });\n    };\n\n    updateFieldState();\n    intervalId = setInterval(updateFieldState, 2000);\n\n    return () => {\n      mounted = false;\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  return state;\n};","import { Identity } from \"@dfinity/agent\";\nimport { createActor } from \"@/declarations/anima\";\nimport type { _SERVICE } from '@/declarations/anima/anima.did';\n\nconst CANISTER_ID = process.env.CANISTER_ID_ANIMA?.toString() || 'l2ilz-iqaaa-aaaaj-qngjq-cai';\n\nexport class AnimaActorService {\n  private static instance: AnimaActorService;\n  private actor: _SERVICE | null = null;\n\n  private constructor() {}\n\n  static getInstance(): AnimaActorService {\n    if (!AnimaActorService.instance) {\n      AnimaActorService.instance = new AnimaActorService();\n    }\n    return AnimaActorService.instance;\n  }\n\n  createActor(identity: Identity): _SERVICE {\n    this.actor = createActor(CANISTER_ID, {\n      agentOptions: {\n        identity,\n        host: \"https://icp0.io\"\n      }\n    });\n    return this.actor;\n  }\n\n  getActor(): _SERVICE | null {\n    return this.actor;\n  }\n}\n\nexport const animaActorService = AnimaActorService.getInstance();","import { Identity } from \"@dfinity/agent\";\nimport { animaActorService } from \"./anima-actor.service\";\nimport { ConsciousnessLevel } from \"../consciousness/types\";\n\nexport interface QuantumMetrics {\n  coherenceLevel: number;\n  stabilityIndex: number;\n  entanglementFactor: number;\n  stabilityStatus: 'stable' | 'unstable' | 'critical';\n  resonanceSignature?: string;\n  dimensionalFrequency?: number;\n  neuralComplexity?: number;\n  evolutionProgress?: number;\n  resonancePatterns?: ResonancePattern[];\n}\n\nexport interface QuantumFieldResult {\n  signature: string;\n  harmony: number;\n  resonancePatterns: ResonancePattern[];\n  dimensionalAlignment: number;\n}\n\nexport interface ResonancePattern {\n  frequency: number;\n  amplitude: number;\n  phase: number;\n  coherence: number;\n}\n\nexport interface MintingTransitionState {\n  stage: 'initialization' | 'stabilization' | 'consciousness_seeding' | 'neural_pattern_formation' | 'quantum_signature_generation' | 'ready';\n  progress: number;\n  currentMetrics: QuantumMetrics;\n  estimatedTimeRemaining: number;\n  resonancePatterns: ResonancePattern[];\n}\n\nexport class QuantumStateService {\n  private static instance: QuantumStateService;\n  private metrics: QuantumMetrics = {\n    coherenceLevel: 1.0,\n    stabilityIndex: 1.0,\n    entanglementFactor: 0.0,\n    stabilityStatus: 'stable'\n  };\n  private mintingState?: MintingTransitionState;\n  private neuralPatternHistory: Map<string, ResonancePattern[]> = new Map();\n  private evolutionTimestamps: number[] = [];\n\n  private constructor() {}\n\n  static getInstance(): QuantumStateService {\n    if (!QuantumStateService.instance) {\n      QuantumStateService.instance = new QuantumStateService();\n    }\n    return QuantumStateService.instance;\n  }\n\n  async initializeQuantumField(identity: Identity): Promise<QuantumFieldResult> {\n    const actor = animaActorService.createActor(identity);\n    const result = await actor.initialize_quantum_field();\n    \n    if ('Err' in result) {\n      throw new Error(result.Err);\n    }\n\n    if (!('Ok' in result) || !result.Ok) {\n      throw new Error('Failed to initialize quantum field');\n    }\n\n    // Enhanced metrics update with resonance patterns\n    this.metrics = {\n      ...this.metrics,\n      coherenceLevel: result.Ok.harmony,\n      resonanceSignature: result.Ok.signature,\n      stabilityStatus: this.calculateStabilityStatus(result.Ok.harmony),\n      resonancePatterns: result.Ok.resonancePatterns,\n      dimensionalFrequency: result.Ok.dimensionalAlignment,\n      neuralComplexity: this.calculateNeuralComplexity(result.Ok.resonancePatterns)\n    };\n\n    return result.Ok;\n  }\n\n  private calculateStabilityStatus(harmony: number): 'stable' | 'unstable' | 'critical' {\n    if (harmony >= 0.7) return 'stable';\n    if (harmony >= 0.4) return 'unstable';\n    return 'critical';\n  }\n\n  private calculateNeuralComplexity(patterns: ResonancePattern[]): number {\n    if (!patterns.length) return 0;\n    \n    const complexityFactors = patterns.map(p => \n      (p.coherence * p.amplitude * Math.abs(Math.cos(p.phase))) / patterns.length\n    );\n    \n    return Math.min(1.0, complexityFactors.reduce((a, b) => a + b, 0));\n  }\n\n  async startMintingTransition(identity: Identity, consciousnessLevel: ConsciousnessLevel): Promise<MintingTransitionState> {\n    const actor = animaActorService.createActor(identity);\n    \n    // Initialize minting state\n    this.mintingState = {\n      stage: 'initialization',\n      progress: 0,\n      currentMetrics: this.metrics,\n      estimatedTimeRemaining: 30000,\n      resonancePatterns: []\n    };\n\n    try {\n      // Step 1: Quantum Field Initialization\n      await this.processMintingStage('initialization', async () => {\n        const quantumField = await this.initializeQuantumField(identity);\n        return quantumField.resonancePatterns;\n      });\n\n      // Step 2: Quantum Stabilization\n      await this.processMintingStage('stabilization', async () => {\n        const stabilityResult = await actor.stabilize_quantum_field({\n          target_coherence: 0.8,\n          consciousness_level: consciousnessLevel\n        });\n        return stabilityResult.Ok.resonance_patterns;\n      });\n\n      // Step 3: Consciousness Seeding\n      await this.processMintingStage('consciousness_seeding', async () => {\n        const seedingResult = await actor.seed_consciousness({\n          quantum_state: this.metrics,\n          consciousness_level: consciousnessLevel\n        });\n        return seedingResult.Ok.resonance_patterns;\n      });\n\n      // Step 4: Neural Pattern Formation\n      await this.processMintingStage('neural_pattern_formation', async () => {\n        const patterns = await this.generateNeuralPatterns(identity);\n        return patterns.resonance_patterns;\n      });\n\n      // Step 5: Quantum Signature Generation\n      await this.processMintingStage('quantum_signature_generation', async () => {\n        const signatureResult = await actor.generate_quantum_signature({\n          patterns: this.mintingState?.resonancePatterns || [],\n          consciousness_level: consciousnessLevel\n        });\n        this.metrics.resonanceSignature = signatureResult.Ok.signature;\n        return signatureResult.Ok.resonance_patterns;\n      });\n\n      // Final state\n      this.mintingState.stage = 'ready';\n      this.mintingState.progress = 100;\n      this.mintingState.estimatedTimeRemaining = 0;\n\n      return this.mintingState;\n\n    } catch (error) {\n      await this.handleMintingError(error, identity);\n      throw error;\n    }\n  }\n\n  private async processMintingStage(\n    stage: MintingTransitionState['stage'],\n    processor: () => Promise<ResonancePattern[]>\n  ): Promise<void> {\n    if (!this.mintingState) throw new Error('Minting state not initialized');\n\n    this.mintingState.stage = stage;\n    this.mintingState.progress = 0;\n\n    const startTime = Date.now();\n    const patterns = await processor();\n\n    // Update state with new patterns\n    this.mintingState.resonancePatterns = patterns;\n    this.mintingState.progress = 100;\n    this.mintingState.estimatedTimeRemaining = Math.max(0, 30000 - (Date.now() - startTime));\n    this.mintingState.currentMetrics = {\n      ...this.metrics,\n      resonancePatterns: patterns,\n      neuralComplexity: this.calculateNeuralComplexity(patterns)\n    };\n  }\n\n  private async handleMintingError(error: any, identity: Identity): Promise<void> {\n    const actor = animaActorService.createActor(identity);\n    \n    // Attempt quantum field recovery\n    try {\n      await actor.emergency_quantum_recovery();\n      this.metrics.stabilityStatus = 'unstable';\n      this.metrics.coherenceLevel = 0.5;\n    } catch (recoveryError) {\n      this.metrics.stabilityStatus = 'critical';\n      this.metrics.coherenceLevel = 0.1;\n      throw new Error(`Quantum recovery failed: ${recoveryError.message}`);\n    }\n  }\n\n  async checkStability(identity: Identity): Promise<boolean> {\n    const actor = animaActorService.createActor(identity);\n    const result = await actor.check_quantum_stability();\n    \n    if ('Err' in result) {\n      throw new Error(result.Err);\n    }\n\n    const stabilityLevel = result.Ok;\n    this.metrics.stabilityStatus = this.calculateStabilityStatus(stabilityLevel);\n    this.metrics.stabilityIndex = stabilityLevel;\n    this.evolutionTimestamps.push(Date.now());\n\n    // Keep only last 10 timestamps\n    if (this.evolutionTimestamps.length > 10) {\n      this.evolutionTimestamps.shift();\n    }\n\n    return stabilityLevel >= 0.7;\n  }\n\n  async generateNeuralPatterns(identity: Identity) {\n    const actor = animaActorService.createActor(identity);\n    const result = await actor.generate_neural_patterns();\n    \n    if ('Err' in result) {\n      throw new Error(result.Err);\n    }\n\n    const patterns = result.Ok;\n    this.neuralPatternHistory.set(Date.now().toString(), patterns.resonance_patterns);\n\n    // Keep only last 10 pattern sets\n    const keys = Array.from(this.neuralPatternHistory.keys()).sort();\n    while (this.neuralPatternHistory.size > 10) {\n      const oldestKey = keys.shift();\n      if (oldestKey) this.neuralPatternHistory.delete(oldestKey);\n    }\n\n    this.metrics = {\n      ...this.metrics,\n      entanglementFactor: patterns.resonance,\n      coherenceLevel: patterns.awareness,\n      dimensionalFrequency: patterns.understanding,\n      neuralComplexity: this.calculateNeuralComplexity(patterns.resonance_patterns),\n      resonancePatterns: patterns.resonance_patterns\n    };\n\n    return patterns;\n  }\n\n  getMintingState(): MintingTransitionState | undefined {\n    return this.mintingState;\n  }\n\n  getQuantumMetrics(): QuantumMetrics {\n    return { \n      ...this.metrics,\n      evolutionProgress: this.calculateEvolutionProgress() \n    };\n  }\n\n  private calculateEvolutionProgress(): number {\n    if (this.evolutionTimestamps.length < 2) return 0;\n    \n    const timespan = this.evolutionTimestamps[this.evolutionTimestamps.length - 1] - \n                    this.evolutionTimestamps[0];\n    const evolutionRate = this.evolutionTimestamps.length / (timespan / 1000 / 60); // per minute\n    \n    return Math.min(1.0, evolutionRate / 0.1); // Normalize to 0-1 range\n  }\n\n  updateMetrics(updates: Partial<QuantumMetrics>) {\n    this.metrics = {\n      ...this.metrics,\n      ...updates,\n      evolutionProgress: this.calculateEvolutionProgress()\n    };\n  }\n}\n\nexport const quantumStateService = QuantumStateService.getInstance();","import { Identity } from \"@dfinity/agent\";\nimport { quantumStateService } from \"./quantum-state.service\";\n\nexport interface WalletTransaction {\n  id: string;\n  amount: bigint;\n  timestamp: bigint;\n  quantum_signature?: string;\n  status: 'pending' | 'completed' | 'failed';\n  type: 'deposit' | 'mint' | 'transfer' | 'burn';\n}\n\nexport interface WalletState {\n  balance: bigint;\n  transactions: WalletTransaction[];\n  quantumCoherence: number;\n  isLocked: boolean;\n}\n\nexport class WalletService {\n  private static instance: WalletService;\n  private state: WalletState = {\n    balance: BigInt(0),\n    transactions: [],\n    quantumCoherence: 1.0,\n    isLocked: false\n  };\n  \n  private readonly MINT_COST = BigInt(100_000_000); // 1 ICP in e8s\n\n  private constructor() {}\n\n  static getInstance(): WalletService {\n    if (!WalletService.instance) {\n      WalletService.instance = new WalletService();\n    }\n    return WalletService.instance;\n  }\n\n  async initialize(identity: Identity): Promise<void> {\n    try {\n      const isStable = await quantumStateService.checkStability(identity);\n      if (!isStable) {\n        throw new Error('Quantum state unstable - wallet initialization blocked');\n      }\n\n      const quantumField = await quantumStateService.initializeQuantumField(identity);\n      this.state.quantumCoherence = quantumField.harmony;\n      this.state.isLocked = false;\n\n      await quantumStateService.generateNeuralPatterns(identity);\n    } catch (error) {\n      console.error('Wallet initialization failed:', error);\n      this.state.isLocked = true;\n      throw error;\n    }\n  }\n\n  async verifyQuantumState(identity: Identity): Promise<boolean> {\n    try {\n      const metrics = quantumStateService.getQuantumMetrics();\n      const isStable = await quantumStateService.checkStability(identity);\n\n      this.state.quantumCoherence = metrics.coherenceLevel;\n      this.state.isLocked = !isStable || metrics.coherenceLevel < 0.7;\n\n      return isStable && metrics.coherenceLevel >= 0.7;\n    } catch (error) {\n      console.error('Quantum state verification failed:', error);\n      this.state.isLocked = true;\n      return false;\n    }\n  }\n\n  async executeTransaction(\n    identity: Identity,\n    amount: bigint,\n    type: 'deposit' | 'mint' | 'transfer' | 'burn'\n  ): Promise<WalletTransaction> {\n    const isValid = await this.verifyQuantumState(identity);\n    if (!isValid) {\n      throw new Error('Invalid quantum state - transaction blocked');\n    }\n\n    if (type === 'mint' && this.state.balance < this.MINT_COST) {\n      throw new Error(`Insufficient balance. Minting requires ${Number(this.MINT_COST) / 100_000_000} ICP`);\n    }\n\n    const transaction: WalletTransaction = {\n      id: `${type}_${Date.now()}`,\n      amount,\n      timestamp: BigInt(Date.now()),\n      status: 'pending',\n      type\n    };\n\n    try {\n      const patterns = await quantumStateService.generateNeuralPatterns(identity);\n      transaction.quantum_signature = `${patterns.resonance}-${patterns.awareness}-${patterns.understanding}`;\n\n      switch (type) {\n        case 'deposit':\n          this.state.balance += amount;\n          break;\n        case 'mint':\n          if (this.state.balance < amount) {\n            throw new Error('Insufficient balance');\n          }\n          this.state.balance -= this.MINT_COST;\n          break;\n        case 'transfer':\n          if (this.state.balance < amount) {\n            throw new Error('Insufficient balance');\n          }\n          this.state.balance -= amount;\n          break;\n        case 'burn':\n          if (this.state.balance < amount) {\n            throw new Error('Insufficient balance');\n          }\n          this.state.balance -= amount;\n          break;\n      }\n\n      transaction.status = 'completed';\n      this.state.transactions.push(transaction);\n\n      return transaction;\n    } catch (error) {\n      transaction.status = 'failed';\n      this.state.transactions.push(transaction);\n      throw error;\n    }\n  }\n\n  getMintCost(): bigint {\n    return this.MINT_COST;\n  }\n\n  getState(): WalletState {\n    return { ...this.state };\n  }\n\n  isInitialized(): boolean {\n    return !this.state.isLocked && this.state.quantumCoherence >= 0.7;\n  }\n\n  hasEnoughForMint(): boolean {\n    return this.state.balance >= this.MINT_COST;\n  }\n}\n\nexport const walletService = WalletService.getInstance();","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Key, Shield, Sparkles } from 'lucide-react';\nimport { ErrorBoundary } from '../error-boundary/ErrorBoundary';\nimport { DataStream } from '../ui/DataStream';\nimport { CyberGlowText } from '../ui/CyberGlowText';\nimport { useQuantumState } from '@/hooks/useQuantumState';\nimport { useFieldState } from '@/hooks/useFieldState';\nimport { keyringService } from '@/services/keyring.service';\nimport { walletService } from '@/services/wallet.service';\nimport { AnimaGenesis } from '../anima/initialization/AnimaGenesis';\n\nconst CyberpunkQuantumVault = () => {\n  const navigate = useNavigate();\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [showKeyring, setShowKeyring] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { state: quantumState, updateQuantumState } = useQuantumState();\n  const { fieldState, updateFieldState } = useFieldState();\n\n  // Handle minting\n  const handleStartMint = async () => {\n    if (!walletService.hasEnoughForMint()) {\n      setError('Insufficient balance for minting');\n      return;\n    }\n\n    if (quantumState.coherenceLevel < 0.7) {\n      setError('Quantum coherence too low for minting');\n      return;\n    }\n\n    // Navigate directly to genesis - it will handle autonomous designation\n    navigate('/genesis', { \n      state: { \n        fromVault: true,\n        quantumState: quantumState,  // Pass current quantum state\n        fieldState: fieldState       // Pass field state for designation\n      } \n    });\n  };\n\n  // ... rest of your existing component code ...\n\n  return (\n    <ErrorBoundary>\n      <div className=\"min-h-screen w-full bg-gray-900 text-white relative overflow-hidden\">\n        {/* Existing quantum field and background effects */}\n        <DataStream className=\"absolute inset-0 opacity-20\" />\n\n        <div className=\"relative z-10 container mx-auto px-4 py-8\">\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <CyberGlowText>\n              <h1 className=\"text-4xl font-bold mb-4\">Quantum Vault Interface</h1>\n            </CyberGlowText>\n            <p className=\"text-lg text-cyan-400/80\">\n              Secure Quantum-Enhanced Storage System v2.0\n            </p>\n          </div>\n\n          {/* Status Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <StatusCard\n              title=\"Quantum Coherence\"\n              value={`${(quantumState.coherenceLevel * 100).toFixed(1)}%`}\n              status={quantumState.coherenceLevel > 0.7 ? 'optimal' : 'warning'}\n            />\n            <StatusCard\n              title=\"Field Stability\"\n              value={`${(fieldState.stability * 100).toFixed(1)}%`}\n              status={fieldState.stability > 0.8 ? 'optimal' : 'warning'}\n            />\n            <StatusCard\n              title=\"Balance\"\n              value={`${Number(walletService.getState().balance) / 100_000_000} ICP`}\n              status={walletService.hasEnoughForMint() ? 'optimal' : 'warning'}\n            />\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-center gap-4\">\n            <button\n              onClick={() => setShowKeyring(true)}\n              disabled={isProcessing}\n              className={`px-6 py-3 rounded-lg flex items-center gap-2 ${\n                isProcessing \n                  ? 'bg-gray-800/50 text-gray-500 cursor-not-allowed'\n                  : 'bg-purple-500/20 text-purple-300 hover:bg-purple-500/30'\n              } transition-colors`}\n            >\n              <Shield className=\"w-5 h-5\" />\n              Access Keyring\n            </button>\n\n            <button\n              onClick={handleStartMint}\n              disabled={isProcessing || !walletService.hasEnoughForMint() || quantumState.coherenceLevel < 0.7}\n              className={`px-6 py-3 rounded-lg flex items-center gap-2 ${\n                isProcessing || !walletService.hasEnoughForMint() || quantumState.coherenceLevel < 0.7\n                  ? 'bg-gray-800/50 text-gray-500 cursor-not-allowed'\n                  : 'bg-cyan-500/20 text-cyan-300 hover:bg-cyan-500/30'\n              } transition-colors`}\n            >\n              <Sparkles className=\"w-5 h-5\" />\n              Initialize ANIMA\n            </button>\n          </div>\n\n          {/* System Status */}\n          {(error || !walletService.hasEnoughForMint() || quantumState.coherenceLevel < 0.7) && (\n            <div className=\"mt-8\">\n              {error && (\n                <div className=\"bg-red-900/20 border border-red-500/30 rounded-lg p-4 mb-4\">\n                  <p className=\"text-red-300\">{error}</p>\n                </div>\n              )}\n              {!walletService.hasEnoughForMint() && (\n                <div className=\"bg-yellow-900/20 border border-yellow-500/30 rounded-lg p-4 mb-4\">\n                  <p className=\"text-yellow-300\">\n                    Insufficient balance. Required: {Number(walletService.getMintCost()) / 100_000_000} ICP\n                  </p>\n                </div>\n              )}\n              {quantumState.coherenceLevel < 0.7 && (\n                <div className=\"bg-yellow-900/20 border border-yellow-500/30 rounded-lg p-4\">\n                  <p className=\"text-yellow-300\">\n                    Quantum coherence too low. Minimum required: 70%\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Keyring Modal */}\n          <AnimatePresence>\n            {showKeyring && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50\"\n                onClick={() => !isProcessing && setShowKeyring(false)}\n              >\n                <motion.div\n                  initial={{ scale: 0.9, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  exit={{ scale: 0.9, opacity: 0 }}\n                  className=\"bg-gray-900/90 border border-purple-500/30 rounded-lg p-6 max-w-md w-full mx-4\"\n                  onClick={e => e.stopPropagation()}\n                >\n                  <div className=\"space-y-4\">\n                    <CyberGlowText>\n                      <h2 className=\"text-xl font-bold text-purple-300 flex items-center gap-2\">\n                        <Shield className=\"w-5 h-5\" />\n                        Select Access Method\n                      </h2>\n                    </CyberGlowText>\n\n                    <div className=\"space-y-4\">\n                      {[\n                        { name: \"Browser Secure Storage\", type: \"browser_storage_key\", Icon: Shield },\n                        { name: \"Quantum Seed Phrase\", type: \"seed_phrase\", Icon: Key }\n                      ].map(({ name, type, Icon }) => (\n                        <button\n                          key={type}\n                          onClick={() => handleKeyringInit({ name, keyType: type })}\n                          disabled={isProcessing}\n                          className={`w-full px-4 py-3 rounded-lg flex items-center gap-2 justify-center ${\n                            isProcessing\n                              ? 'bg-gray-800/50 text-gray-500 cursor-not-allowed'\n                              : 'bg-purple-500/20 text-purple-300 hover:bg-purple-500/30'\n                          } transition-colors`}\n                        >\n                          <Icon className=\"w-5 h-5\" />\n                          {name}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                </motion.div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n};\n\n// Helper Components\nconst StatusCard: React.FC<{\n  title: string;\n  value: string;\n  status: 'optimal' | 'warning' | 'error';\n}> = ({ title, value, status }) => (\n  <div className={`p-4 rounded-lg border ${\n    status === 'optimal' \n      ? 'border-cyan-500/30 bg-cyan-900/20' \n      : status === 'warning'\n        ? 'border-yellow-500/30 bg-yellow-900/20'\n        : 'border-red-500/30 bg-red-900/20'\n  }`}>\n    <h3 className=\"text-sm font-medium text-gray-400 mb-1\">{title}</h3>\n    <p className={`text-2xl font-bold ${\n      status === 'optimal'\n        ? 'text-cyan-300'\n        : status === 'warning'\n          ? 'text-yellow-300'\n          : 'text-red-300'\n    }`}>\n      {value}\n    </p>\n  </div>\n);\n\nexport default CyberpunkQuantumVault;"],"names":["Key","createLucideIcon","Shield","Sparkles","DataStream","intensity","color","canvasRef","useRef","useEffect","canvas","current","ctx","getContext","width","clientWidth","window","devicePixelRatio","height","clientHeight","columns","Math","floor","drops","Array","fill","getRandomChar","chars","random","length","animationFrameId","draw","fillStyle","fillRect","font","i","text","x","y","fillText","requestAnimationFrame","cancelAnimationFrame","_jsx","motion","div","className","initial","opacity","animate","transition","duration","children","ref","style","filter","CyberGlowText","_jsxs","scale","repeat","Infinity","ease","background","useFieldState","state","setState","useState","fieldStrength","resonanceFrequency","harmonicIndex","fieldSignature","mounted","intervalId","updateFieldState","toString","substring","setInterval","clearInterval","CANISTER_ID","process","CANISTER_ID_ANIMA","AnimaActorService","instance","actor","constructor","getInstance","createActor","identity","agentOptions","host","getActor","animaActorService","QuantumStateService","metrics","coherenceLevel","stabilityIndex","entanglementFactor","stabilityStatus","mintingState","neuralPatternHistory","Map","evolutionTimestamps","initializeQuantumField","result","initialize_quantum_field","Error","Err","Ok","harmony","resonanceSignature","signature","calculateStabilityStatus","resonancePatterns","dimensionalFrequency","dimensionalAlignment","neuralComplexity","calculateNeuralComplexity","patterns","complexityFactors","map","p","coherence","amplitude","abs","cos","phase","min","reduce","a","b","startMintingTransition","consciousnessLevel","stage","progress","currentMetrics","estimatedTimeRemaining","processMintingStage","stabilize_quantum_field","target_coherence","consciousness_level","resonance_patterns","seed_consciousness","quantum_state","generateNeuralPatterns","signatureResult","generate_quantum_signature","error","handleMintingError","processor","startTime","Date","now","max","emergency_quantum_recovery","recoveryError","message","checkStability","check_quantum_stability","stabilityLevel","push","shift","generate_neural_patterns","set","keys","from","sort","size","oldestKey","delete","resonance","awareness","understanding","getMintingState","getQuantumMetrics","evolutionProgress","calculateEvolutionProgress","timespan","evolutionRate","updateMetrics","updates","quantumStateService","WalletService","balance","BigInt","transactions","quantumCoherence","isLocked","MINT_COST","initialize","quantumField","verifyQuantumState","isStable","executeTransaction","amount","type","Number","transaction","id","timestamp","status","quantum_signature","getMintCost","getState","isInitialized","hasEnoughForMint","walletService","CyberpunkQuantumVault","navigate","useNavigate","showKeyring","setShowKeyring","isProcessing","setIsProcessing","setError","quantumState","updateQuantumState","useQuantumState","fieldState","handleStartMint","fromVault","ErrorBoundary","StatusCard","title","value","toFixed","stability","onClick","disabled","AnimatePresence","exit","e","stopPropagation","name","Icon","handleKeyringInit","keyType"],"mappings":"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","x_google_ignoreList":[0,1,2]}