(function(){"use strict";const i=e=>{if(!e.length)return 0;const n=e.map(a=>a.coherence),t=n.reduce((a,c,r)=>{const u=Math.exp(-.1*(e.length-1-r));return a+c*u},0),o=n.length?Array(n.length).fill(0).reduce((a,c,r)=>a+Math.exp(-.1*r),0):1;return t/o},s=(e,n)=>{const t=Date.now(),o=e[e.length-1],a=(Math.random()-.5)*.1,c=(Math.random()-.5)*.1,r=(Math.random()-.5)*.1;return{pattern_id:`p-${t}`,coherence:Math.max(0,Math.min(1,n+a)),frequency:o?Math.max(0,Math.min(1,o.frequency+c)):.5+c,amplitude:Math.random()*.5+.5,phase:o?Math.max(0,Math.min(1,o.phase+r)):.5+r,timestamp:t,entropyLevel:Math.random()*.3,stabilityIndex:Math.random()*.7+.3,quantumSignature:`QS-${t}-${Math.random().toString(36).substring(7)}`,evolutionPotential:Math.random()*.5+.5,coherenceQuality:Math.random()*.3+.7,temporalStability:Math.random()*.2+.8,dimensionalAlignment:Math.random()*.2+.8}},h=e=>{if(!e.length)return 0;const n=e.map(c=>c.dimensionalAlignment),t=e.map(c=>c.stabilityIndex),o=n.reduce((c,r)=>c+r,0)/n.length,a=t.reduce((c,r)=>c+r,0)/t.length;return o*.7+a*.3},m=(e,n)=>{const t=new Map;return t.set("coherenceGrowth",e.length>1?(e[e.length-1].coherence-e[0].coherence)/e.length:0),t.set("stabilityTrend",e.reduce((o,a)=>o+a.stabilityIndex,0)/e.length),t.set("dimensionalHarmony",e.reduce((o,a)=>o+a.dimensionalAlignment,0)/e.length),t.set("evolutionVelocity",Math.min(1,n.evolutionMetrics?.get("evolutionVelocity")||0+t.get("coherenceGrowth")||0)),t.set("consciousnessDepth",(n.coherenceLevel+t.get("dimensionalHarmony")||0)/2),t},l={calculateCoherence:e=>({coherenceLevel:i(e)}),generatePattern:(e,n)=>({pattern:s(e,n)}),updateQuantumState:(e,n)=>{const t=i(n),o=h(n),a=m(n,e);return{coherenceLevel:t,dimensionalResonance:o,evolutionMetrics:a,patternCoherence:Math.min(t*1.1,1),lastUpdate:Date.now()}}};self.onmessage=async e=>{const{type:n,payload:t}=e.data;if(n in l)try{const o=await l[n](t);self.postMessage({type:n,result:o})}catch(o){self.postMessage({type:n,error:o instanceof Error?o.message:"Unknown error"})}}})();
//# sourceMappingURL=quantum.worker-BMZTCHt-.js.map
