{"version":3,"file":"Wallet-C-PZYF70.js","sources":["../../src/hooks/usePayment.ts","../../src/components/ui/Wallet.tsx"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { useAuth } from '@/contexts/auth-context';\nimport { Principal } from '@dfinity/principal';\n\ninterface PaymentResult {\n  height: bigint;\n  transactionId: string;\n}\n\ninterface PaymentVerification {\n  verified: boolean;\n  timestamp: bigint;\n  status: 'pending' | 'confirmed' | 'failed';\n}\n\ninterface PaymentParams {\n  amount: bigint;\n  memo?: bigint;\n  toCanister: Principal;\n}\n\nconst PAYMENT_AMOUNTS = {\n  Genesis: BigInt(100_000_000), // 1 ICP\n  Evolution: BigInt(50_000_000), // 0.5 ICP\n  Feature: BigInt(25_000_000),  // 0.25 ICP\n  Quantum: BigInt(75_000_000),  // 0.75 ICP\n};\n\nconst VERIFICATION_RETRIES = 3;\nconst VERIFICATION_INTERVAL = 2000; // 2 seconds\n\nexport const usePayment = () => {\n  const { actor, principal } = useAuth();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [lastTransaction, setLastTransaction] = useState<PaymentResult | null>(null);\n\n  const getBalance = useCallback(async (): Promise<bigint> => {\n    if (!actor || !principal) {\n      throw new Error('Not authenticated');\n    }\n\n    try {\n      const balance = await actor.icrc1_balance_of({\n        owner: Principal.fromText(principal),\n        subaccount: [],\n      });\n      return balance;\n    } catch (err) {\n      console.error('Balance check failed:', err);\n      throw new Error('Failed to fetch balance');\n    }\n  }, [actor, principal]);\n\n  const initiatePayment = useCallback(async ({\n    amount,\n    memo = BigInt(Date.now()),\n    toCanister\n  }: PaymentParams): Promise<PaymentResult> => {\n    if (!actor || !principal) {\n      throw new Error('Not authenticated');\n    }\n\n    setIsProcessing(true);\n    setError(null);\n\n    try {\n      const balance = await getBalance();\n      if (balance < amount) {\n        throw new Error('Insufficient balance');\n      }\n\n      const result = await actor.icrc2_transfer({\n        amount,\n        to: { owner: toCanister, subaccount: [] },\n        fee: [], // Let the ledger decide the fee\n        memo: [memo],\n        from_subaccount: [],\n        created_at_time: [BigInt(Date.now())],\n      });\n\n      if ('Err' in result) {\n        throw new Error(JSON.stringify(result.Err));\n      }\n\n      const payment: PaymentResult = {\n        height: result.Ok,\n        transactionId: result.Ok.toString(),\n      };\n\n      setLastTransaction(payment);\n      return payment;\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Payment failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setIsProcessing(false);\n    }\n  }, [actor, principal, getBalance]);\n\n  const verifyPayment = useCallback(async (height: bigint): Promise<PaymentVerification> => {\n    if (!actor) {\n      throw new Error('Not authenticated');\n    }\n\n    let retries = VERIFICATION_RETRIES;\n    \n    while (retries > 0) {\n      try {\n        const result = await actor.verify_payment(height);\n        \n        if ('Ok' in result) {\n          return {\n            verified: true,\n            timestamp: result.Ok.timestamp,\n            status: 'confirmed'\n          };\n        }\n\n        if (retries === 1) {\n          return {\n            verified: false,\n            timestamp: BigInt(Date.now()),\n            status: 'failed'\n          };\n        }\n\n        await new Promise(resolve => setTimeout(resolve, VERIFICATION_INTERVAL));\n        retries--;\n        \n      } catch (err) {\n        if (retries === 1) {\n          throw new Error('Payment verification failed');\n        }\n        await new Promise(resolve => setTimeout(resolve, VERIFICATION_INTERVAL));\n        retries--;\n      }\n    }\n\n    return {\n      verified: false,\n      timestamp: BigInt(Date.now()),\n      status: 'failed'\n    };\n  }, [actor]);\n\n  const getPaymentAmount = useCallback((type: keyof typeof PAYMENT_AMOUNTS) => {\n    return PAYMENT_AMOUNTS[type];\n  }, []);\n\n  const getTransactionStatus = useCallback(async (transactionId: string) => {\n    if (!actor) {\n      throw new Error('Not authenticated');\n    }\n\n    try {\n      const status = await actor.get_transaction_status(transactionId);\n      return status;\n    } catch (err) {\n      console.error('Failed to get transaction status:', err);\n      throw new Error('Transaction status check failed');\n    }\n  }, [actor]);\n\n  return {\n    initiatePayment,\n    verifyPayment,\n    getBalance,\n    getPaymentAmount,\n    getTransactionStatus,\n    isProcessing,\n    error,\n    lastTransaction,\n  };\n};\n\nexport type PaymentHook = ReturnType<typeof usePayment>;","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { usePayment } from '@/hooks/usePayment';\n\ninterface WalletProps {\n  className?: string;\n}\n\nexport const Wallet: React.FC<WalletProps> = ({ className = '' }) => {\n  const { balance, ledgerService, refreshBalance } = usePayment();\n\n  return (\n    <div className={`bg-white/5 rounded-xl p-4 ${className}`}>\n      <div className=\"flex justify-between items-center\">\n        <span className=\"text-gray-300\">Wallet Balance:</span>\n        <div className=\"flex items-center gap-2\">\n          {balance !== null ? (\n            <span className=\"text-white font-semibold\">\n              {ledgerService?.formatICP(balance)}\n            </span>\n          ) : (\n            <motion.div\n              animate={{ opacity: [0.5, 1, 0.5] }}\n              transition={{ duration: 1.5, repeat: Infinity }}\n              className=\"h-6 w-24 bg-white/10 rounded\"\n            />\n          )}\n          <button\n            onClick={() => refreshBalance()}\n            className=\"text-blue-400 hover:text-blue-300 transition-colors\"\n          >\n            â†»\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};"],"names":["PAYMENT_AMOUNTS","Genesis","BigInt","Evolution","Feature","Quantum","VERIFICATION_RETRIES","VERIFICATION_INTERVAL","usePayment","actor","principal","useAuth","isProcessing","setIsProcessing","useState","error","setError","lastTransaction","setLastTransaction","getBalance","useCallback","Error","balance","icrc1_balance_of","owner","Principal","fromText","subaccount","err","initiatePayment","amount","memo","Date","now","toCanister","result","icrc2_transfer","to","fee","from_subaccount","created_at_time","JSON","stringify","Err","payment","height","Ok","transactionId","toString","errorMessage","message","verifyPayment","retries","verify_payment","verified","timestamp","status","Promise","resolve","setTimeout","getPaymentAmount","type","getTransactionStatus","get_transaction_status","Wallet","className","ledgerService","refreshBalance","children","_jsx","_jsxs","formatICP","motion","div","animate","opacity","transition","duration","repeat","Infinity","onClick"],"mappings":"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"}