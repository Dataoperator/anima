{"version":3,"file":"anima-context-D_6u8Pbw.js","sources":["../../src/contexts/anima-context.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { useAuth } from './auth-context';\nimport { getAnimaActor } from '@/services/anima';\nimport type { AnimaToken } from '@/declarations/anima/anima.did';\n\ninterface AnimaContextType {\n  selectedAnima: AnimaToken | null;\n  setSelectedAnima: (anima: AnimaToken | null) => void;\n  loading: boolean;\n  error: string | null;\n  fetchAnima: (id: string) => Promise<void>;\n}\n\nconst AnimaContext = createContext<AnimaContextType>({\n  selectedAnima: null,\n  setSelectedAnima: () => {},\n  loading: false,\n  error: null,\n  fetchAnima: async () => {},\n});\n\nexport const useAnima = () => useContext(AnimaContext);\n\nexport const AnimaProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { identity } = useAuth();\n  const [selectedAnima, setSelectedAnima] = useState<AnimaToken | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchAnima = useCallback(async (id: string) => {\n    try {\n      if (!identity) {\n        throw new Error('Authentication required');\n      }\n\n      setLoading(true);\n      setError(null);\n\n      const actor = await getAnimaActor(identity);\n      const result = await actor.get_anima(BigInt(id));\n\n      if (!result || result.length === 0) {\n        throw new Error('Anima not found');\n      }\n\n      setSelectedAnima(result[0]);\n    } catch (err: any) {\n      console.error('Error fetching anima:', err);\n      setError(err.message || 'Failed to fetch anima');\n      setSelectedAnima(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [identity]);\n\n  useEffect(() => {\n    if (!identity) {\n      setSelectedAnima(null);\n    }\n  }, [identity]);\n\n  return (\n    <AnimaContext.Provider\n      value={{\n        selectedAnima,\n        setSelectedAnima,\n        loading,\n        error,\n        fetchAnima,\n      }}\n    >\n      {children}\n    </AnimaContext.Provider>\n  );\n};"],"names":["AnimaContext","createContext","selectedAnima","setSelectedAnima","loading","error","fetchAnima","useAnima","useContext"],"mappings":"iGAaA,MAAMA,EAAeC,EAAAA,cAAgC,CACnDC,cAAe,KACfC,iBAAkBA,IAAM,CAAC,EACzBC,QAAS,GACTC,MAAO,KACPC,WAAY,SAAY,CAAA,CAC1B,CAAC,EAEYC,EAAWA,IAAMC,EAAAA,WAAWR,CAAY"}