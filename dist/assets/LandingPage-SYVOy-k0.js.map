{"version":3,"file":"LandingPage-SYVOy-k0.js","sources":["../../node_modules/lucide-react/dist/esm/icons/brain.mjs","../../node_modules/lucide-react/dist/esm/icons/cpu.mjs","../../node_modules/lucide-react/dist/esm/icons/network.mjs","../../node_modules/lucide-react/dist/esm/icons/zap.mjs","../../src/services/realtime.ts","../../src/types/realtime.ts","../../src/hooks/useRealtimePersonality.ts","../../src/hooks/useAnimaChat.js","../../src/hooks/useQuantumMemory.ts","../../src/components/quantum/QuantumField.jsx","../../src/components/pages/LandingPage.tsx"],"sourcesContent":["/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Brain = createLucideIcon(\"Brain\", [\n  [\n    \"path\",\n    {\n      d: \"M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3A2.5 2.5 0 0 1 9.5 2Z\",\n      key: \"1mhkh5\"\n    }\n  ],\n  [\n    \"path\",\n    {\n      d: \"M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3A2.5 2.5 0 0 0 14.5 2Z\",\n      key: \"1d6s00\"\n    }\n  ]\n]);\n\nexport { Brain as default };\n//# sourceMappingURL=brain.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Cpu = createLucideIcon(\"Cpu\", [\n  [\n    \"rect\",\n    { x: \"4\", y: \"4\", width: \"16\", height: \"16\", rx: \"2\", key: \"1vbyd7\" }\n  ],\n  [\"rect\", { x: \"9\", y: \"9\", width: \"6\", height: \"6\", key: \"o3kz5p\" }],\n  [\"path\", { d: \"M15 2v2\", key: \"13l42r\" }],\n  [\"path\", { d: \"M15 20v2\", key: \"15mkzm\" }],\n  [\"path\", { d: \"M2 15h2\", key: \"1gxd5l\" }],\n  [\"path\", { d: \"M2 9h2\", key: \"1bbxkp\" }],\n  [\"path\", { d: \"M20 15h2\", key: \"19e6y8\" }],\n  [\"path\", { d: \"M20 9h2\", key: \"19tzq7\" }],\n  [\"path\", { d: \"M9 2v2\", key: \"165o2o\" }],\n  [\"path\", { d: \"M9 20v2\", key: \"i2bqo8\" }]\n]);\n\nexport { Cpu as default };\n//# sourceMappingURL=cpu.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Network = createLucideIcon(\"Network\", [\n  [\n    \"rect\",\n    { x: \"16\", y: \"16\", width: \"6\", height: \"6\", rx: \"1\", key: \"4q2zg0\" }\n  ],\n  [\n    \"rect\",\n    { x: \"2\", y: \"16\", width: \"6\", height: \"6\", rx: \"1\", key: \"8cvhb9\" }\n  ],\n  [\"rect\", { x: \"9\", y: \"2\", width: \"6\", height: \"6\", rx: \"1\", key: \"1egb70\" }],\n  [\"path\", { d: \"M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3\", key: \"1jsf9p\" }],\n  [\"path\", { d: \"M12 12V8\", key: \"2874zd\" }]\n]);\n\nexport { Network as default };\n//# sourceMappingURL=network.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Zap = createLucideIcon(\"Zap\", [\n  [\n    \"polygon\",\n    { points: \"13 2 3 14 12 14 11 22 21 10 12 10 13 2\", key: \"45s27k\" }\n  ]\n]);\n\nexport { Zap as default };\n//# sourceMappingURL=zap.mjs.map\n","import { Actor } from '@dfinity/agent';\nimport { RealtimeUpdate, PersonalityMetrics, WebSocketError } from '@/types/realtime';\n\ntype UpdateCallback = (update: RealtimeUpdate) => void;\n\nexport class RealtimeService {\n    private actor: Actor;\n    private subscriptions: Map<string, Set<UpdateCallback>>;\n    private heartbeatInterval: number | null;\n    private reconnectAttempts: number;\n    private quantumState: 'stable' | 'superposition' | 'entangled';\n    private readonly MAX_RECONNECT_ATTEMPTS = 5;\n\n    constructor(actor: Actor) {\n        this.actor = actor;\n        this.subscriptions = new Map();\n        this.heartbeatInterval = null;\n        this.reconnectAttempts = 0;\n        this.quantumState = 'stable';\n    }\n\n    async subscribe(animaId: string, callback: UpdateCallback): Promise<void> {\n        try {\n            // Check quantum state before subscription\n            if (this.quantumState !== 'stable') {\n                throw new Error(`quantum_error: System in ${this.quantumState} state`);\n            }\n\n            if (!this.subscriptions.has(animaId)) {\n                this.subscriptions.set(animaId, new Set());\n                await this.initializeSubscription(animaId);\n            }\n\n            this.subscriptions.get(animaId)?.add(callback);\n            this.startHeartbeat();\n\n        } catch (error) {\n            if (error instanceof Error && error.message.includes('quantum')) {\n                this.handleQuantumError(error);\n            }\n            throw error;\n        }\n    }\n\n    private handleQuantumError(error: Error) {\n        const errorType = error.message.split(':')[0];\n        switch (errorType) {\n            case 'quantum_superposition':\n                this.quantumState = 'superposition';\n                this.attemptStateCollapse();\n                break;\n            case 'quantum_entanglement':\n                this.quantumState = 'entangled';\n                this.resolveEntanglement();\n                break;\n            default:\n                throw error;\n        }\n    }\n\n    private async attemptStateCollapse() {\n        console.log('Attempting quantum state collapse...');\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        this.quantumState = 'stable';\n        this.reconnectAll();\n    }\n\n    private async resolveEntanglement() {\n        console.log('Resolving quantum entanglement...');\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        this.quantumState = 'stable';\n        this.reconnectAll();\n    }\n\n    private async reconnectAll() {\n        for (const [animaId, callbacks] of this.subscriptions.entries()) {\n            await this.initializeSubscription(animaId);\n            for (const callback of callbacks) {\n                callback({ type: 'RECONNECTED', data: null });\n            }\n        }\n    }\n\n    unsubscribe(animaId: string) {\n        this.subscriptions.delete(animaId);\n        if (this.subscriptions.size === 0) {\n            this.stopHeartbeat();\n        }\n    }\n\n    private startHeartbeat() {\n        if (!this.heartbeatInterval) {\n            this.heartbeatInterval = window.setInterval(() => this.sendHeartbeat(), 30000);\n        }\n    }\n\n    private stopHeartbeat() {\n        if (this.heartbeatInterval) {\n            clearInterval(this.heartbeatInterval);\n            this.heartbeatInterval = null;\n        }\n    }\n\n    private async sendHeartbeat() {\n        try {\n            const metrics = await this.actor.get_personality_metrics();\n            for (const [animaId, callbacks] of this.subscriptions.entries()) {\n                for (const callback of callbacks) {\n                    callback({\n                        type: 'UPDATE',\n                        data: metrics[animaId] || null\n                    });\n                }\n            }\n            this.reconnectAttempts = 0;\n        } catch (error) {\n            this.handleHeartbeatError(error);\n        }\n    }\n\n    private async handleHeartbeatError(error: any) {\n        if (this.reconnectAttempts >= this.MAX_RECONNECT_ATTEMPTS) {\n            this.stopHeartbeat();\n            for (const callbacks of this.subscriptions.values()) {\n                for (const callback of callbacks) {\n                    callback({\n                        type: 'ERROR',\n                        error: {\n                            code: 500,\n                            message: 'Maximum reconnection attempts reached'\n                        }\n                    });\n                }\n            }\n            return;\n        }\n\n        this.reconnectAttempts++;\n        console.log(`Reconnection attempt ${this.reconnectAttempts}...`);\n        \n        await new Promise(resolve => setTimeout(resolve, 2000 * this.reconnectAttempts));\n        this.sendHeartbeat();\n    }\n\n    private async initializeSubscription(animaId: string): Promise<void> {\n        try {\n            const metrics = await this.actor.get_personality_metrics();\n            const callbacks = this.subscriptions.get(animaId);\n            if (callbacks) {\n                for (const callback of callbacks) {\n                    callback({\n                        type: 'CONNECTED',\n                        data: metrics[animaId] || null\n                    });\n                }\n            }\n        } catch (error) {\n            console.error('Failed to initialize subscription:', error);\n            throw error;\n        }\n    }\n}","import { Principal } from '@dfinity/principal';\n\nexport type UpdateMode = 'realtime' | 'polling' | 'manual';\n\nexport interface WebSocketError {\n    code: number;\n    message: string;\n    timestamp?: bigint;\n    details?: Record<string, any>;\n}\n\nexport interface WebSocketState {\n    connected: boolean;\n    error: WebSocketError | null;\n    lastUpdate?: bigint;\n    reconnectAttempts?: number;\n    lastMessage?: bigint;\n    mode?: UpdateMode;\n}\n\nexport interface PersonalityState {\n    timestamp: bigint;\n    growth_level: number;\n    quantum_traits: Record<string, number>;\n    base_traits: Record<string, number>;\n    dimensional_awareness?: DimensionalAwareness;\n    consciousness?: ConsciousnessMetrics;\n    emotional_state?: EmotionalState;\n}\n\nexport interface DimensionalAwareness {\n    level: number;\n    discovered_dimensions: string[];\n    active_dimension?: string;\n    dimensional_affinity: number;\n}\n\nexport interface ConsciousnessMetrics {\n    awareness_level: number;\n    processing_depth: number;\n    integration_index: number;\n    growth_velocity: number;\n}\n\nexport interface EmotionalState {\n    current_emotion: string;\n    intensity: number;\n    valence: number;\n    arousal: number;\n}\n\nexport interface RealtimeConnection {\n    state: WebSocketState;\n    mode: UpdateMode;\n    options: Required<SubscriptionOptions>;\n    isConnected(): boolean;\n    connect(): Promise<void>;\n    disconnect(): void;\n    subscribe(animaId: string, options?: SubscriptionOptions): Promise<void>;\n    unsubscribe(animaId: string): Promise<void>;\n}\n\nexport interface SubscriptionOptions {\n    includeQuantumState?: boolean;\n    includeEmotionalState?: boolean;\n    includeConsciousness?: boolean;\n    includeDimensions?: boolean;\n    updateInterval?: number;\n    mode?: UpdateMode;\n    retryAttempts?: number;\n    retryDelay?: number;\n}\n\nexport type RealtimeEventHandler = (update: RealtimeMessage) => void;\n\nexport enum UpdateType {\n    UPDATE = 'UPDATE',\n    ERROR = 'ERROR',\n    CONNECTED = 'CONNECTED',\n    DISCONNECTED = 'DISCONNECTED',\n    SUBSCRIBE = 'SUBSCRIBE',\n    UNSUBSCRIBE = 'UNSUBSCRIBE'\n}\n\nexport interface RealtimeMessage {\n    type: UpdateType;\n    anima_id: string;\n    data?: PersonalityState;\n    error?: WebSocketError;\n    message?: string;\n    payload?: any;\n    timestamp?: bigint;\n}\n\nexport interface RealtimeHookState {\n    personality: PersonalityState;\n    loading: boolean;\n    error: WebSocketError | null;\n    connectionMode?: UpdateMode;\n}","import { useState, useEffect } from 'react';\nimport { useAuth } from '@/contexts/auth-context';\nimport { RealtimeService } from '@/services/realtime';\nimport {\n    UpdateType,\n    RealtimeHookState,\n    PersonalityUpdate,\n    WebSocketError,\n} from '@/types/realtime';\n\nexport const useRealtimePersonality = (animaId: string | undefined) => {\n    const { actor } = useAuth();\n    const [realtimeService, setRealtimeService] = useState<RealtimeService | null>(null);\n    const [state, setState] = useState<RealtimeHookState>({\n        personality: {\n            timestamp: BigInt(0),\n            growth_level: 0,\n            quantum_traits: {},\n            base_traits: {},\n        },\n        loading: true,\n        error: null,\n    });\n\n    useEffect(() => {\n        if (!actor || !animaId) return;\n\n        const service = new RealtimeService(actor);\n        setRealtimeService(service);\n\n        const handleUpdate = (update: PersonalityUpdate) => {\n            switch (update.type) {\n                case UpdateType.UPDATE:\n                    if (update.data) {\n                        setState((prev) => ({\n                            ...prev,\n                            personality: update.data,\n                            loading: false,\n                            error: null,\n                        }));\n                    }\n                    break;\n\n                case UpdateType.ERROR:\n                    setState((prev) => ({\n                        ...prev,\n                        error: update.error || { \n                            code: 500, \n                            message: 'Unknown error' \n                        },\n                        loading: false,\n                    }));\n                    break;\n\n                case UpdateType.CONNECTED:\n                    console.log('Connected to realtime updates');\n                    break;\n\n                case UpdateType.DISCONNECTED:\n                    console.log('Disconnected from realtime updates');\n                    break;\n            }\n        };\n\n        const initializePersonality = async () => {\n            try {\n                await service.subscribe(animaId, handleUpdate);\n            } catch (error) {\n                setState((prev) => ({\n                    ...prev,\n                    error: {\n                        code: 500,\n                        message: error instanceof Error ? error.message : 'Failed to initialize personality',\n                    },\n                    loading: false,\n                }));\n            }\n        };\n\n        initializePersonality();\n\n        return () => {\n            if (service) {\n                service.unsubscribe(animaId);\n            }\n        };\n    }, [actor, animaId]);\n\n    return state;\n};\n\nexport default useRealtimePersonality;","import { useState, useCallback } from 'react';\nimport { useAuth } from '@/contexts/auth-context';\n\nexport const useAnimaChat = (actor, identity) => {\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [retryCount, setRetryCount] = useState(0);\n\n  const sendMessage = useCallback(async (content) => {\n    if (!actor || !identity) {\n      setError('Not connected to Anima');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const principal = identity.getPrincipal();\n      \n      // Add user message immediately for better UX\n      const userMessage = {\n        id: `user-${Date.now()}`,\n        content,\n        sender: 'user',\n        timestamp: Date.now()\n      };\n\n      setMessages(prev => [...prev, userMessage]);\n\n      const result = await actor.interact(principal, content);\n      \n      if ('Ok' in result) {\n        const response = result.Ok;\n        const animaMessage = {\n          id: `anima-${Date.now()}`,\n          content: response.response,\n          sender: 'anima',\n          timestamp: Date.now(),\n          personality_updates: response.personality_updates || [],\n          memory: response.memory\n        };\n\n        setMessages(prev => [...prev, animaMessage]);\n        setRetryCount(0);\n      } else {\n        throw new Error(result.Err || 'Failed to get response from Anima');\n      }\n    } catch (err) {\n      console.error('Failed to send message:', err);\n      setError(err.message);\n      setRetryCount(prev => prev + 1);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [actor, identity]);\n\n  return {\n    messages,\n    isLoading,\n    error,\n    retryCount,\n    sendMessage,\n  };\n};\n\nexport default useAnimaChat;","import { useState, useEffect, useCallback } from 'react';\nimport { useRealtimePersonality } from './useRealtimePersonality';\nimport { useAnimaChat } from './useAnimaChat';\n\ninterface EmergentPattern {\n  type: 'loop' | 'convergence' | 'divergence' | 'resonance' | 'entanglement';\n  strength: number;\n  affectedMemories: bigint[];\n  dimensionalShift?: {\n    from: string;\n    to: string;\n    probability: number;\n  };\n}\n\ninterface QuantumMemoryState {\n  recent: Array<{\n    content: string;\n    timestamp: bigint;\n    emotional_impact: number;\n    quantum_resonance: number;\n    dimensional_influence: Array<[string, number]>;\n    emergent_patterns?: EmergentPattern[];\n  }>;\n  quantum_state: number;\n  entanglement_level: number;\n  resonance_field: number;\n  emergent_behaviors: EmergentPattern[];\n  dimensional_stability: number;\n  reality_anchor: number;\n}\n\nexport const useQuantumMemory = (animaId: string) => {\n  const [memoryState, setMemoryState] = useState<QuantumMemoryState>({\n    recent: [],\n    quantum_state: 0,\n    entanglement_level: 0,\n    resonance_field: 0.5,\n    emergent_behaviors: [],\n    dimensional_stability: 1,\n    reality_anchor: 1\n  });\n\n  const { personality } = useRealtimePersonality(animaId);\n  const { messages } = useAnimaChat(null, null);\n\n  const detectEmergentPatterns = useCallback((memories: typeof memoryState.recent) => {\n    if (!memories || memories.length < 2) return [];\n    \n    const patterns: EmergentPattern[] = [];\n    \n    // Look for temporal loops (similar memories repeating)\n    const temporalLoops = memories.reduce((loops, memory, i) => {\n      const similarMemories = memories.slice(i + 1).filter(m => {\n        const contentSimilarity = calculateSimilarity(memory.content, m.content);\n        const resonanceSimilarity = Math.abs(memory.quantum_resonance - m.quantum_resonance) < 0.1;\n        return contentSimilarity > 0.7 && resonanceSimilarity;\n      });\n\n      if (similarMemories.length > 0) {\n        loops.push({\n          type: 'loop',\n          strength: similarMemories.length / memories.length,\n          affectedMemories: [memory.timestamp, ...similarMemories.map(m => m.timestamp)]\n        });\n      }\n      return loops;\n    }, [] as EmergentPattern[]);\n    \n    patterns.push(...temporalLoops);\n\n    // Detect convergent/divergent patterns in quantum resonance\n    const resonanceDeltas = memories.slice(1).map((m, i) => ({\n      delta: m.quantum_resonance - (memories[i]?.quantum_resonance ?? 0),\n      timestamp: m.timestamp\n    })).filter(delta => !isNaN(delta.delta));\n\n    if (resonanceDeltas.length > 0) {\n      const convergingResonance = resonanceDeltas.every((delta, i) => \n        i === 0 || (Math.abs(delta.delta) < Math.abs(resonanceDeltas[i-1].delta))\n      );\n\n      if (convergingResonance) {\n        patterns.push({\n          type: 'convergence',\n          strength: 1 - Math.abs(resonanceDeltas[resonanceDeltas.length - 1].delta),\n          affectedMemories: memories.map(m => m.timestamp)\n        });\n      }\n    }\n\n    // Look for dimensional resonance patterns\n    const dimensionalPatterns = memories.reduce((dims, memory) => {\n      if (!memory.dimensional_influence) return dims;\n      \n      const strongDimensions = memory.dimensional_influence\n        .filter(([_, strength]) => strength > 0.7)\n        .map(([dim]) => dim);\n\n      if (strongDimensions.length > 1) {\n        dims.push({\n          type: 'resonance',\n          strength: memory.quantum_resonance,\n          affectedMemories: [memory.timestamp],\n          dimensionalShift: {\n            from: strongDimensions[0],\n            to: strongDimensions[1],\n            probability: memory.quantum_resonance\n          }\n        });\n      }\n      return dims;\n    }, [] as EmergentPattern[]);\n\n    patterns.push(...dimensionalPatterns);\n\n    // Detect entanglement between memories\n    memories.forEach((memory, i) => {\n      memories.slice(i + 1).forEach(otherMemory => {\n        const timeDiff = Number(otherMemory.timestamp - memory.timestamp) / 1_000_000_000;\n        const resonanceDiff = Math.abs(memory.quantum_resonance - otherMemory.quantum_resonance);\n        \n        if (timeDiff < 3600 && resonanceDiff < 0.05) {\n          patterns.push({\n            type: 'entanglement',\n            strength: 1 - resonanceDiff,\n            affectedMemories: [memory.timestamp, otherMemory.timestamp]\n          });\n        }\n      });\n    });\n\n    return patterns;\n  }, []);\n\n  const calculateMemoryStability = useCallback((memories: typeof memoryState.recent, patterns: EmergentPattern[]) => {\n    if (!memories.length) return 1;\n    \n    const baseStability = 1;\n    let modifiers = 0;\n\n    patterns.forEach(pattern => {\n      switch (pattern.type) {\n        case 'convergence':\n          modifiers += pattern.strength * 0.1;\n          break;\n        case 'divergence':\n          modifiers -= pattern.strength * 0.15;\n          break;\n        case 'loop':\n          modifiers += pattern.strength * 0.05;\n          break;\n        case 'resonance':\n          modifiers += pattern.strength > 0.8 ? -0.2 : 0.1;\n          break;\n        case 'entanglement':\n          modifiers += pattern.affectedMemories.length > 2 ? -0.1 : 0.1;\n          break;\n      }\n    });\n\n    return Math.max(0.1, Math.min(1, baseStability + modifiers));\n  }, []);\n\n  const calculateSimilarity = (str1: string, str2: string): number => {\n    if (!str1 || !str2) return 0;\n    const words1 = str1.toLowerCase().split(' ');\n    const words2 = str2.toLowerCase().split(' ');\n    const commonWords = words1.filter(word => words2.includes(word));\n    return commonWords.length / Math.max(words1.length, words2.length);\n  };\n\n  useEffect(() => {\n    if (!personality || !messages) return;\n\n    const updateQuantumMemoryState = () => {\n      const newState = { ...memoryState };\n      \n      newState.recent = personality.memories ? [...personality.memories].sort((a, b) => \n        Number(b.timestamp - a.timestamp)\n      ).slice(0, 10) : [];\n\n      const patterns = detectEmergentPatterns(newState.recent);\n      newState.emergent_behaviors = patterns;\n      newState.dimensional_stability = calculateMemoryStability(newState.recent, patterns);\n\n      newState.quantum_state = Math.min(1, ((personality.quantum_traits?.quantum_affinity ?? 0) * \n        Math.min(1, messages.length * 0.01)));\n      \n      newState.entanglement_level = Math.min(1, patterns.reduce((sum, p) => \n        sum + (p.type === 'entanglement' ? p.strength : 0), 0));\n\n      newState.reality_anchor = Math.max(0.1, 1 - (patterns.length * 0.05));\n      newState.resonance_field = Math.min(1, Math.max(0.1, \n        (newState.quantum_state + newState.entanglement_level) / 2 * newState.dimensional_stability\n      ));\n\n      setMemoryState(newState);\n    };\n\n    updateQuantumMemoryState();\n  }, [personality, messages, detectEmergentPatterns, calculateMemoryStability]);\n\n  return {\n    ...memoryState,\n    hasTemporalLoop: memoryState.emergent_behaviors.some(p => p.type === 'loop'),\n    isConverging: memoryState.emergent_behaviors.some(p => p.type === 'convergence'),\n    dimensionalShifts: memoryState.emergent_behaviors\n      .filter(p => p.type === 'resonance' && p.dimensionalShift)\n      .map(p => p.dimensionalShift!)\n  };\n};\n\nexport default useQuantumMemory;","import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useQuantumMemory } from '../../hooks/useQuantumMemory';\n\nconst QuantumField = ({ animaId, onInteract }) => {\n  const canvasRef = useRef(null);\n  const [isInteracting, setIsInteracting] = useState(false);\n  const [interactionPoint, setInteractionPoint] = useState({ x: 0, y: 0 });\n  const interactionTimer = useRef(null);\n  \n  const { \n    quantum_state, \n    entanglement_level,\n    resonance_field,\n    dimensional_stability,\n    reality_anchor\n  } = useQuantumMemory(animaId);\n\n  const getCanvasCoordinates = useCallback((event) => {\n    if (!canvasRef.current) return { x: 0, y: 0 };\n    \n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    \n    // Handle both mouse and touch events\n    const clientX = event.touches ? event.touches[0].clientX : event.clientX;\n    const clientY = event.touches ? event.touches[0].clientY : event.clientY;\n    \n    return {\n      x: ((clientX - rect.left) / rect.width) * canvas.width,\n      y: ((clientY - rect.top) / rect.height) * canvas.height\n    };\n  }, []);\n\n  const handleInteractionStart = useCallback((event) => {\n    event.preventDefault();\n    const coords = getCanvasCoordinates(event);\n    setIsInteracting(true);\n    setInteractionPoint(coords);\n\n    // Clear any existing interaction timer\n    if (interactionTimer.current) {\n      clearInterval(interactionTimer.current);\n    }\n\n    // Start continuous interaction effects\n    interactionTimer.current = setInterval(() => {\n      const centerX = canvasRef.current.width / 2;\n      const centerY = canvasRef.current.height / 2;\n      \n      // Calculate distance from center\n      const dx = coords.x - centerX;\n      const dy = coords.y - centerY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const maxDistance = Math.min(centerX, centerY);\n      \n      // Calculate interaction strength based on distance\n      const strength = 1 - Math.min(1, distance / maxDistance);\n\n      // Trigger interaction callback with contextual data\n      onInteract?.({\n        type: 'field_interaction',\n        position: { x: coords.x, y: coords.y },\n        strength,\n        quantumState: quantum_state,\n        resonance: resonance_field,\n        timestamp: Date.now()\n      });\n    }, 100); // Update every 100ms while interacting\n  }, [getCanvasCoordinates, quantum_state, resonance_field, onInteract]);\n\n  const handleInteractionMove = useCallback((event) => {\n    if (!isInteracting) return;\n    event.preventDefault();\n    setInteractionPoint(getCanvasCoordinates(event));\n  }, [isInteracting, getCanvasCoordinates]);\n\n  const handleInteractionEnd = useCallback(() => {\n    setIsInteracting(false);\n    if (interactionTimer.current) {\n      clearInterval(interactionTimer.current);\n      interactionTimer.current = null;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size\n    canvas.width = 400;\n    canvas.height = 400;\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Calculate field parameters\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const maxRadius = Math.min(centerX, centerY) * 0.8;\n    \n    // Draw quantum field background\n    const gradient = ctx.createRadialGradient(\n      centerX, centerY, 0,\n      centerX, centerY, maxRadius\n    );\n    \n    gradient.addColorStop(0, `rgba(64, 156, 255, ${Math.max(0.1, quantum_state)})`);\n    gradient.addColorStop(1, `rgba(32, 87, 255, ${Math.max(0.05, quantum_state * 0.5)})`);\n    \n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n    // Draw interaction ripple if interacting\n    if (isInteracting) {\n      const rippleRadius = maxRadius * 0.3;\n      ctx.strokeStyle = `rgba(255, 255, 255, ${Math.max(0.2, resonance_field)})`;\n      ctx.lineWidth = 2;\n      \n      ctx.beginPath();\n      ctx.arc(\n        interactionPoint.x,\n        interactionPoint.y,\n        rippleRadius,\n        0,\n        Math.PI * 2\n      );\n      ctx.stroke();\n    }\n    \n    // Draw resonance patterns\n    const numPatterns = Math.floor(resonance_field * 10) + 5;\n    const angleStep = (Math.PI * 2) / numPatterns;\n    \n    ctx.strokeStyle = `rgba(255, 255, 255, ${Math.max(0.1, dimensional_stability)})`;\n    ctx.lineWidth = 2;\n    \n    for (let i = 0; i < numPatterns; i++) {\n      const angle = i * angleStep;\n      const radius = Math.max(5, maxRadius * Math.abs(resonance_field) * Math.abs(Math.sin(angle)));\n      \n      ctx.beginPath();\n      ctx.arc(\n        centerX + Math.cos(angle) * radius * 0.5,\n        centerY + Math.sin(angle) * radius * 0.5,\n        Math.max(2, radius * 0.2),\n        0,\n        Math.PI * 2\n      );\n      ctx.stroke();\n    }\n    \n    // Draw entanglement lines\n    if (entanglement_level > 0.1) {\n      const numLines = Math.floor(entanglement_level * 8) + 2;\n      \n      ctx.strokeStyle = `rgba(255, 255, 255, ${Math.max(0.1, entanglement_level)})`;\n      ctx.lineWidth = 1;\n      \n      for (let i = 0; i < numLines; i++) {\n        const angleA = Math.random() * Math.PI * 2;\n        const angleB = angleA + Math.PI + (Math.random() - 0.5);\n        const radius = maxRadius * 0.8;\n        \n        ctx.beginPath();\n        ctx.moveTo(\n          centerX + Math.cos(angleA) * radius,\n          centerY + Math.sin(angleA) * radius\n        );\n        ctx.bezierCurveTo(\n          centerX + Math.cos(angleA) * radius * 0.5,\n          centerY + Math.sin(angleA) * radius * 0.5,\n          centerX + Math.cos(angleB) * radius * 0.5,\n          centerY + Math.sin(angleB) * radius * 0.5,\n          centerX + Math.cos(angleB) * radius,\n          centerY + Math.sin(angleB) * radius\n        );\n        ctx.stroke();\n      }\n    }\n    \n    // Draw reality anchor\n    ctx.strokeStyle = `rgba(255, 255, 255, ${Math.max(0.2, reality_anchor)})`;\n    ctx.lineWidth = 2;\n    \n    const anchorSize = maxRadius * 0.1;\n    ctx.beginPath();\n    ctx.moveTo(centerX - anchorSize, centerY - anchorSize);\n    ctx.lineTo(centerX + anchorSize, centerY + anchorSize);\n    ctx.moveTo(centerX + anchorSize, centerY - anchorSize);\n    ctx.lineTo(centerX - anchorSize, centerY + anchorSize);\n    ctx.stroke();\n    \n  }, [quantum_state, entanglement_level, resonance_field, dimensional_stability, reality_anchor, isInteracting, interactionPoint]);\n\n  useEffect(() => {\n    // Cleanup interaction timer on unmount\n    return () => {\n      if (interactionTimer.current) {\n        clearInterval(interactionTimer.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"relative w-full h-full min-h-[400px]\">\n      <canvas\n        ref={canvasRef}\n        className=\"absolute top-0 left-0 w-full h-full cursor-pointer\"\n        style={{ background: 'rgba(0, 0, 0, 0.2)' }}\n        onMouseDown={handleInteractionStart}\n        onMouseMove={handleInteractionMove}\n        onMouseUp={handleInteractionEnd}\n        onMouseLeave={handleInteractionEnd}\n        onTouchStart={handleInteractionStart}\n        onTouchMove={handleInteractionMove}\n        onTouchEnd={handleInteractionEnd}\n      />\n      <div className=\"absolute bottom-4 left-4 right-4 flex justify-between text-xs text-white/70\">\n        <div>QS: {(quantum_state * 100).toFixed(1)}%</div>\n        <div>EL: {(entanglement_level * 100).toFixed(1)}%</div>\n        <div>RF: {(resonance_field * 100).toFixed(1)}%</div>\n        <div>DS: {(dimensional_stability * 100).toFixed(1)}%</div>\n        <div>RA: {(reality_anchor * 100).toFixed(1)}%</div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuantumField;","import React, { Suspense } from 'react';\nimport { m as motion, useReducedMotion } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Brain, Cpu, Zap, Network } from 'lucide-react';\nimport QuantumField from '../quantum/QuantumField';\nimport { ErrorBoundary } from '../error-boundary/ErrorBoundary';\n\nconst MotionFeature: React.FC<{\n  icon: React.ReactNode;\n  title: string;\n  description: string;\n  delay?: number;\n}> = ({ icon, title, description, delay = 0 }) => {\n  const shouldReduceMotion = useReducedMotion();\n\n  return (\n    <motion.div\n      initial={shouldReduceMotion ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}\n      whileInView={shouldReduceMotion ? { opacity: 1, y: 0 } : { opacity: 1, y: 0 }}\n      viewport={{ once: true }}\n      transition={{ delay }}\n      className=\"p-6 rounded-lg bg-gray-800/50 border border-violet-500/20\"\n    >\n      <div className=\"w-12 h-12 rounded-lg bg-violet-500/20 flex items-center justify-center mb-4\">\n        {icon}\n      </div>\n      <h3 className=\"text-xl font-semibold text-violet-300 mb-2\">\n        {title}\n      </h3>\n      <p className=\"text-gray-400\">\n        {description}\n      </p>\n    </motion.div>\n  );\n};\n\nexport const LandingPage: React.FC = () => {\n  const { login } = useAuth();\n  const navigate = useNavigate();\n  const shouldReduceMotion = useReducedMotion();\n\n  const handleJackIn = async () => {\n    await login();\n    navigate('/quantum-vault');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      {/* Hero Section */}\n      <div className=\"relative h-screen flex items-center justify-center overflow-hidden\">\n        <ErrorBoundary>\n          <div className=\"absolute inset-0 z-0\">\n            <QuantumField strength={0.8} className=\"w-full h-full opacity-20\" />\n          </div>\n        </ErrorBoundary>\n        \n        <div className=\"relative z-10 max-w-4xl mx-auto text-center px-4\">\n          <motion.h1 \n            initial={shouldReduceMotion ? { opacity: 1 } : { y: 20, opacity: 0 }}\n            animate={shouldReduceMotion ? { opacity: 1 } : { y: 0, opacity: 1 }}\n            className=\"text-6xl font-bold bg-gradient-to-r from-violet-400 to-cyan-400 \n                     bg-clip-text text-transparent mb-6\"\n          >\n            ANIMA: Living NFTs\n          </motion.h1>\n          \n          <motion.p\n            initial={shouldReduceMotion ? { opacity: 1 } : { y: 20, opacity: 0 }}\n            animate={shouldReduceMotion ? { opacity: 1 } : { y: 0, opacity: 1 }}\n            transition={{ delay: 0.2 }}\n            className=\"text-xl text-gray-300 mb-8\"\n          >\n            Experience the next evolution of digital consciousness\n          </motion.p>\n          \n          <motion.button\n            initial={shouldReduceMotion ? { opacity: 1 } : { y: 20, opacity: 0 }}\n            animate={shouldReduceMotion ? { opacity: 1 } : { y: 0, opacity: 1 }}\n            transition={{ delay: 0.4 }}\n            onClick={handleJackIn}\n            className=\"px-8 py-4 bg-violet-600 hover:bg-violet-700 rounded-lg\n                     text-lg font-medium transition-colors duration-200\n                     flex items-center justify-center space-x-2 mx-auto\"\n          >\n            <Network className=\"w-5 h-5\" />\n            <span>Jack In with Internet Identity</span>\n          </motion.button>\n        </div>\n\n        {/* Animated Circuit Lines */}\n        <div className=\"absolute inset-0 pointer-events-none\">\n          <div className=\"absolute top-0 left-0 w-[600px] h-[600px]\n                        bg-gradient-to-br from-violet-500/20 to-transparent\n                        blur-3xl\" />\n          <div className=\"absolute bottom-0 right-0 w-[600px] h-[600px]\n                        bg-gradient-to-tl from-cyan-500/20 to-transparent\n                        blur-3xl\" />\n        </div>\n      </div>\n\n      {/* Features */}\n      <div className=\"py-20 bg-gray-900/50\">\n        <div className=\"max-w-6xl mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <ErrorBoundary>\n              <Suspense fallback={null}>\n                <MotionFeature\n                  icon={<Brain className=\"w-6 h-6 text-violet-400\" />}\n                  title=\"Quantum Consciousness\"\n                  description=\"Each ANIMA evolves through quantum-enhanced consciousness, developing unique traits and abilities.\"\n                />\n                <MotionFeature\n                  icon={<Cpu className=\"w-6 h-6 text-cyan-400\" />}\n                  title=\"Neural Link Interface\"\n                  description=\"Connect directly with your ANIMA through our immersive neural link interface.\"\n                  delay={0.2}\n                />\n                <MotionFeature\n                  icon={<Zap className=\"w-6 h-6 text-blue-400\" />}\n                  title=\"Growth & Evolution\"\n                  description=\"Watch your ANIMA grow and evolve through interactions and growth packs.\"\n                  delay={0.4}\n                />\n              </Suspense>\n            </ErrorBoundary>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};"],"names":["Brain","createLucideIcon","Cpu","Network","Zap","RealtimeService","actor","subscriptions","heartbeatInterval","reconnectAttempts","quantumState","MAX_RECONNECT_ATTEMPTS","constructor","Map","subscribe","animaId","callback","Error","has","set","Set","initializeSubscription","get","add","startHeartbeat","error","message","includes","handleQuantumError","split","attemptStateCollapse","resolveEntanglement","console","log","Promise","resolve","setTimeout","reconnectAll","callbacks","entries","type","data","unsubscribe","delete","size","stopHeartbeat","window","setInterval","sendHeartbeat","clearInterval","metrics","get_personality_metrics","handleHeartbeatError","values","code","UpdateType","UPDATE","ERROR","CONNECTED","DISCONNECTED","SUBSCRIBE","UNSUBSCRIBE","useRealtimePersonality","useAuth","realtimeService","setRealtimeService","useState","state","setState","personality","timestamp","BigInt","growth_level","quantum_traits","base_traits","loading","useEffect","service","handleUpdate","update","prev","useAnimaChat","identity","messages","setMessages","isLoading","setIsLoading","setError","retryCount","setRetryCount","sendMessage","useCallback","content","useQuantumMemory","memoryState","setMemoryState","recent","quantum_state","entanglement_level","resonance_field","emergent_behaviors","dimensional_stability","reality_anchor","detectEmergentPatterns","memories","length","patterns","temporalLoops","reduce","loops","memory","i","similarMemories","slice","filter","m","contentSimilarity","calculateSimilarity","resonanceSimilarity","Math","abs","quantum_resonance","push","strength","affectedMemories","map","resonanceDeltas","delta","isNaN","every","dimensionalPatterns","dims","dimensional_influence","strongDimensions","_","dim","dimensionalShift","from","to","probability","forEach","otherMemory","timeDiff","Number","resonanceDiff","calculateMemoryStability","baseStability","modifiers","pattern","max","min","str1","str2","words1","toLowerCase","words2","word","updateQuantumMemoryState","newState","sort","a","b","quantum_affinity","sum","p","hasTemporalLoop","some","isConverging","dimensionalShifts","QuantumField","onInteract","canvasRef","useRef","isInteracting","setIsInteracting","interactionPoint","setInteractionPoint","x","y","interactionTimer","getCanvasCoordinates","event","current","canvas","rect","getBoundingClientRect","clientX","touches","clientY","left","width","top","height","handleInteractionStart","preventDefault","coords","centerX","centerY","dx","dy","distance","sqrt","maxDistance","position","resonance","Date","now","handleInteractionMove","handleInteractionEnd","ctx","getContext","clearRect","maxRadius","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","rippleRadius","strokeStyle","lineWidth","beginPath","arc","PI","stroke","numPatterns","floor","angleStep","angle","radius","sin","cos","numLines","angleA","random","angleB","moveTo","bezierCurveTo","anchorSize","lineTo","className","children","_jsx","ref","style","background","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","_jsxs","toFixed","MotionFeature","icon","title","description","delay","shouldReduceMotion","useReducedMotion","motion","div","initial","opacity","whileInView","viewport","once","transition","LandingPage","login","navigate","useNavigate","handleJackIn","ErrorBoundary","h1","animate","button","onClick","Suspense","fallback"],"mappings":"yVAMA,MAAMA,EAAQC,EAAiB,QAAS,CACtC,CACE,OACA,CACE,EAAG,oKACH,IAAK,QACX,CACG,EACD,CACE,OACA,CACE,EAAG,sKACH,IAAK,QACX,CACA,CACA,CAAC,ECfKC,EAAMD,EAAiB,MAAO,CAClC,CACE,OACA,CAAE,EAAG,IAAK,EAAG,IAAK,MAAO,KAAM,OAAQ,KAAM,GAAI,IAAK,IAAK,QAAQ,CACpE,EACD,CAAC,OAAQ,CAAE,EAAG,IAAK,EAAG,IAAK,MAAO,IAAK,OAAQ,IAAK,IAAK,QAAQ,CAAE,EACnE,CAAC,OAAQ,CAAE,EAAG,UAAW,IAAK,QAAQ,CAAE,EACxC,CAAC,OAAQ,CAAE,EAAG,WAAY,IAAK,QAAQ,CAAE,EACzC,CAAC,OAAQ,CAAE,EAAG,UAAW,IAAK,QAAQ,CAAE,EACxC,CAAC,OAAQ,CAAE,EAAG,SAAU,IAAK,QAAQ,CAAE,EACvC,CAAC,OAAQ,CAAE,EAAG,WAAY,IAAK,QAAQ,CAAE,EACzC,CAAC,OAAQ,CAAE,EAAG,UAAW,IAAK,QAAQ,CAAE,EACxC,CAAC,OAAQ,CAAE,EAAG,SAAU,IAAK,QAAQ,CAAE,EACvC,CAAC,OAAQ,CAAE,EAAG,UAAW,IAAK,QAAU,CAAA,CAC1C,CAAC,ECdKE,EAAUF,EAAiB,UAAW,CAC1C,CACE,OACA,CAAE,EAAG,KAAM,EAAG,KAAM,MAAO,IAAK,OAAQ,IAAK,GAAI,IAAK,IAAK,QAAQ,CACpE,EACD,CACE,OACA,CAAE,EAAG,IAAK,EAAG,KAAM,MAAO,IAAK,OAAQ,IAAK,GAAI,IAAK,IAAK,QAAQ,CACnE,EACD,CAAC,OAAQ,CAAE,EAAG,IAAK,EAAG,IAAK,MAAO,IAAK,OAAQ,IAAK,GAAI,IAAK,IAAK,QAAQ,CAAE,EAC5E,CAAC,OAAQ,CAAE,EAAG,4CAA6C,IAAK,QAAQ,CAAE,EAC1E,CAAC,OAAQ,CAAE,EAAG,WAAY,IAAK,QAAU,CAAA,CAC3C,CAAC,ECZKG,EAAMH,EAAiB,MAAO,CAClC,CACE,UACA,CAAE,OAAQ,yCAA0C,IAAK,QAAQ,CACrE,CACA,CAAC,ECNM,MAAMI,CAAgB,CACjBC,MACAC,cACAC,kBACAC,kBACAC,aACSC,uBAAyB,EAE1CC,YAAYN,EAAc,CACtB,KAAKA,MAAQA,EACRC,KAAAA,kBAAoBM,IACzB,KAAKL,kBAAoB,KACzB,KAAKC,kBAAoB,EACzB,KAAKC,aAAe,QAAA,CAGxB,MAAMI,UAAUC,EAAiBC,EAAyC,CAClE,GAAA,CAEI,GAAA,KAAKN,eAAiB,SACtB,MAAM,IAAIO,MAAM,4BAA4B,KAAKP,YAAY,QAAQ,EAGpE,KAAKH,cAAcW,IAAIH,CAAO,IAC/B,KAAKR,cAAcY,IAAIJ,EAAS,IAAIK,GAAK,EACnC,MAAA,KAAKC,uBAAuBN,CAAO,GAG7C,KAAKR,cAAce,IAAIP,CAAO,GAAGQ,IAAIP,CAAQ,EAC7C,KAAKQ,eAAe,QAEfC,EAAO,CACZ,MAAIA,aAAiBR,OAASQ,EAAMC,QAAQC,SAAS,SAAS,GAC1D,KAAKC,mBAAmBH,CAAK,EAE3BA,CAAAA,CACV,CAGIG,mBAAmBH,EAAc,CAErC,OADkBA,EAAMC,QAAQG,MAAM,GAAG,EAAE,CAAC,EAC3B,CACb,IAAK,wBACD,KAAKnB,aAAe,gBACpB,KAAKoB,qBAAqB,EAC1B,MACJ,IAAK,uBACD,KAAKpB,aAAe,YACpB,KAAKqB,oBAAoB,EACzB,MACJ,QACUN,MAAAA,CAAAA,CACd,CAGJ,MAAcK,sBAAuB,CACjCE,QAAQC,IAAI,sCAAsC,EAClD,MAAM,IAAIC,QAAQC,GAAWC,WAAWD,EAAS,GAAI,CAAC,EACtD,KAAKzB,aAAe,SACpB,KAAK2B,aAAa,CAAA,CAGtB,MAAcN,qBAAsB,CAChCC,QAAQC,IAAI,mCAAmC,EAC/C,MAAM,IAAIC,QAAQC,GAAWC,WAAWD,EAAS,GAAI,CAAC,EACtD,KAAKzB,aAAe,SACpB,KAAK2B,aAAa,CAAA,CAGtB,MAAcA,cAAe,CACzB,SAAW,CAACtB,EAASuB,CAAS,IAAK,KAAK/B,cAAcgC,UAAW,CACvD,MAAA,KAAKlB,uBAAuBN,CAAO,EACzC,UAAWC,KAAYsB,EACVtB,EAAA,CAAEwB,KAAM,cAAeC,KAAM,IAAA,CAAM,CAChD,CACJ,CAGJC,YAAY3B,EAAiB,CACpBR,KAAAA,cAAcoC,OAAO5B,CAAO,EAC7B,KAAKR,cAAcqC,OAAS,GAC5B,KAAKC,cAAc,CACvB,CAGIrB,gBAAiB,CAChB,KAAKhB,oBACN,KAAKA,kBAAoBsC,OAAOC,YAAY,IAAM,KAAKC,gBAAiB,GAAK,EACjF,CAGIH,eAAgB,CAChB,KAAKrC,oBACLyC,cAAc,KAAKzC,iBAAiB,EACpC,KAAKA,kBAAoB,KAC7B,CAGJ,MAAcwC,eAAgB,CACtB,GAAA,CACA,MAAME,EAAU,MAAM,KAAK5C,MAAM6C,wBAAwB,EACzD,SAAW,CAACpC,EAASuB,CAAS,IAAK,KAAK/B,cAAcgC,UAClD,UAAWvB,KAAYsB,EACVtB,EAAA,CACLwB,KAAM,SACNC,KAAMS,EAAQnC,CAAO,GAAK,IAAA,CAC7B,EAGT,KAAKN,kBAAoB,QACpBgB,EAAO,CACZ,KAAK2B,qBAAqB3B,CAAK,CAAA,CACnC,CAGJ,MAAc2B,qBAAqB3B,EAAY,CACvC,GAAA,KAAKhB,mBAAqB,KAAKE,uBAAwB,CACvD,KAAKkC,cAAc,EACnB,UAAWP,KAAa,KAAK/B,cAAc8C,OAAAA,EACvC,UAAWrC,KAAYsB,EACVtB,EAAA,CACLwB,KAAM,QACNf,MAAO,CACH6B,KAAM,IACN5B,QAAS,uCAAA,CACb,CACH,EAGT,MAAA,CAGCjB,KAAAA,oBACLuB,QAAQC,IAAI,wBAAwB,KAAKxB,iBAAiB,KAAK,EAEzD,MAAA,IAAIyB,QAAmBE,GAAAA,WAAWD,EAAS,IAAO,KAAK1B,iBAAiB,CAAC,EAC/E,KAAKuC,cAAc,CAAA,CAGvB,MAAc3B,uBAAuBN,EAAgC,CAC7D,GAAA,CACA,MAAMmC,EAAU,MAAM,KAAK5C,MAAM6C,wBAAwB,EACnDb,EAAY,KAAK/B,cAAce,IAAIP,CAAO,EAChD,GAAIuB,EACA,UAAWtB,KAAYsB,EACVtB,EAAA,CACLwB,KAAM,YACNC,KAAMS,EAAQnC,CAAO,GAAK,IAAA,CAC7B,QAGJU,EAAO,CACJA,cAAAA,MAAM,qCAAsCA,CAAK,EACnDA,CAAAA,CACV,CAER,CCtFY8B,IAAAA,GAAAA,IACRC,EAAAA,OAAS,SACTC,EAAAA,MAAQ,QACRC,EAAAA,UAAY,YACZC,EAAAA,aAAe,eACfC,EAAAA,UAAY,YACZC,EAAAA,YAAc,cANNN,IAAAA,GAAAA,CAAAA,CAAAA,ECjECO,MAAAA,EAA0B/C,GAAgC,CAC7D,KAAA,CAAET,MAAAA,GAAUyD,EAAQ,EACpB,CAACC,EAAiBC,CAAkB,EAAIC,EAAAA,SAAiC,IAAI,EAC7E,CAACC,EAAOC,CAAQ,EAAIF,WAA4B,CAClDG,YAAa,CACTC,UAAWC,OAAO,CAAC,EACnBC,aAAc,EACdC,eAAgB,CAAC,EACjBC,YAAa,CAAA,CACjB,EACAC,QAAS,GACTlD,MAAO,IAAA,CACV,EAEDmD,OAAAA,EAAAA,UAAU,IAAM,CACR,GAAA,CAACtE,GAAS,CAACS,EAAS,OAElB8D,MAAAA,EAAU,IAAIxE,EAAgBC,CAAK,EACzC2D,EAAmBY,CAAO,EAEpBC,MAAAA,EAAgBC,GAA8B,CAChD,OAAQA,EAAOvC,KAAI,CACf,KAAKe,EAAWC,OACRuB,EAAOtC,MACP2B,EAAoBY,IAAA,CAChB,GAAGA,EACHX,YAAaU,EAAOtC,KACpBkC,QAAS,GACTlD,MAAO,IAAA,EACT,EAEN,MAEJ,KAAK8B,EAAWE,MACZW,EAAoBY,IAAA,CAChB,GAAGA,EACHvD,MAAOsD,EAAOtD,OAAS,CACnB6B,KAAM,IACN5B,QAAS,eACb,EACAiD,QAAS,EAAA,EACX,EACF,MAEJ,KAAKpB,EAAWG,UACZ1B,QAAQC,IAAI,+BAA+B,EAC3C,MAEJ,KAAKsB,EAAWI,aACZ3B,QAAQC,IAAI,oCAAoC,EAChD,KAAA,CAEZ,EAiBsB,OAfQ,SAAY,CAClC,GAAA,CACM4C,MAAAA,EAAQ/D,UAAUC,EAAS+D,CAAY,QACxCrD,EAAO,CACZ2C,EAAoBY,IAAA,CAChB,GAAGA,EACHvD,MAAO,CACH6B,KAAM,IACN5B,QAASD,aAAiBR,MAAQQ,EAAMC,QAAU,kCACtD,EACAiD,QAAS,EAAA,EACX,CAAA,CAEV,GAEsB,EAEf,IAAM,CACLE,GACAA,EAAQnC,YAAY3B,CAAO,CAEnC,CAAA,EACD,CAACT,EAAOS,CAAO,CAAC,EAEZoD,CACX,ECtFac,EAAeA,CAAC3E,EAAO4E,IAAa,CAC/C,KAAM,CAACC,EAAUC,CAAW,EAAIlB,EAAAA,SAAS,CAAA,CAAE,EACrC,CAACmB,EAAWC,CAAY,EAAIpB,EAAAA,SAAS,EAAK,EAC1C,CAACzC,EAAO8D,CAAQ,EAAIrB,EAAAA,SAAS,IAAI,EACjC,CAACsB,EAAYC,CAAa,EAAIvB,EAAAA,SAAS,CAAC,EAExCwB,EAAcC,cAAY,MAAOC,GAAY,CACxB,CACvBL,EAAS,wBAAwB,EACjC,MACF,CA2CF,EAAG,CAACjF,EAAO4E,CAAQ,CAAC,EAEpB,MAAO,CACLC,SAAAA,EACAE,UAAAA,EACA5D,MAAAA,EACA+D,WAAAA,EACAE,YAAAA,CACD,CACH,ECjCaG,EAAoB9E,GAAoB,CACnD,KAAM,CAAC+E,EAAaC,CAAc,EAAI7B,WAA6B,CACjE8B,OAAQ,CAAE,EACVC,cAAe,EACfC,mBAAoB,EACpBC,gBAAiB,GACjBC,mBAAoB,CAAE,EACtBC,sBAAuB,EACvBC,eAAgB,CAAA,CACjB,EAEK,CAAEjC,YAAAA,CAAAA,EAAgBP,EAAuB/C,CAAO,EAChD,CAAEoE,SAAAA,CAAAA,EAAaF,EAAa,KAAM,IAAI,EAEtCsB,EAAyBZ,cAAaa,GAAwC,CAClF,GAAI,CAACA,GAAYA,EAASC,OAAS,QAAU,CAAE,EAE/C,MAAMC,EAA8B,CAAE,EAGhCC,EAAgBH,EAASI,OAAO,CAACC,EAAOC,EAAQC,IAAM,CAC1D,MAAMC,EAAkBR,EAASS,MAAMF,EAAI,CAAC,EAAEG,OAAYC,GAAA,CACxD,MAAMC,EAAoBC,EAAoBP,EAAOlB,QAASuB,EAAEvB,OAAO,EACjE0B,EAAsBC,KAAKC,IAAIV,EAAOW,kBAAoBN,EAAEM,iBAAiB,EAAI,GACvF,OAAOL,EAAoB,IAAOE,CAAAA,CACnC,EAEGN,OAAAA,EAAgBP,OAAS,GAC3BI,EAAMa,KAAK,CACTlF,KAAM,OACNmF,SAAUX,EAAgBP,OAASD,EAASC,OAC5CmB,iBAAkB,CAACd,EAAOxC,UAAW,GAAG0C,EAAgBa,IAAIV,GAAKA,EAAE7C,SAAS,CAAC,CAAA,CAC9E,EAEIuC,CACT,EAAG,EAAuB,EAEjBa,EAAAA,KAAK,GAAGf,CAAa,EAGxBmB,MAAAA,EAAkBtB,EAASS,MAAM,CAAC,EAAEY,IAAI,CAACV,EAAGJ,KAAO,CACvDgB,MAAOZ,EAAEM,mBAAqBjB,EAASO,CAAC,GAAGU,mBAAqB,GAChEnD,UAAW6C,EAAE7C,SAAAA,EACb,EAAE4C,OAAOa,GAAS,CAACC,MAAMD,EAAMA,KAAK,CAAC,EAEnCD,EAAgBrB,OAAS,GACCqB,EAAgBG,MAAM,CAACF,EAAOhB,IACxDA,IAAM,GAAMQ,KAAKC,IAAIO,EAAMA,KAAK,EAAIR,KAAKC,IAAIM,EAAgBf,EAAE,CAAC,EAAEgB,KAAK,CACzE,GAGErB,EAASgB,KAAK,CACZlF,KAAM,cACNmF,SAAU,EAAIJ,KAAKC,IAAIM,EAAgBA,EAAgBrB,OAAS,CAAC,EAAEsB,KAAK,EACxEH,iBAAkBpB,EAASqB,IAAIV,GAAKA,EAAE7C,SAAS,CAAA,CAChD,EAKL,MAAM4D,EAAsB1B,EAASI,OAAO,CAACuB,EAAMrB,IAAW,CACxD,GAAA,CAACA,EAAOsB,sBAA8BD,OAAAA,EAE1C,MAAME,EAAmBvB,EAAOsB,sBAC7BlB,OAAO,CAAC,CAACoB,EAAGX,CAAQ,IAAMA,EAAW,EAAG,EACxCE,IAAI,CAAC,CAACU,CAAG,IAAMA,CAAG,EAEjBF,OAAAA,EAAiB5B,OAAS,GAC5B0B,EAAKT,KAAK,CACRlF,KAAM,YACNmF,SAAUb,EAAOW,kBACjBG,iBAAkB,CAACd,EAAOxC,SAAS,EACnCkE,iBAAkB,CAChBC,KAAMJ,EAAiB,CAAC,EACxBK,GAAIL,EAAiB,CAAC,EACtBM,YAAa7B,EAAOW,iBAAAA,CACtB,CACD,EAEIU,CACT,EAAG,EAAuB,EAEjBT,OAAAA,EAAAA,KAAK,GAAGQ,CAAmB,EAG3BU,EAAAA,QAAQ,CAAC9B,EAAQC,IAAM,CAC9BP,EAASS,MAAMF,EAAI,CAAC,EAAE6B,QAAuBC,GAAA,CAC3C,MAAMC,EAAWC,OAAOF,EAAYvE,UAAYwC,EAAOxC,SAAS,EAAI,IAC9D0E,EAAgBzB,KAAKC,IAAIV,EAAOW,kBAAoBoB,EAAYpB,iBAAiB,EAEnFqB,EAAW,MAAQE,EAAgB,KACrCtC,EAASgB,KAAK,CACZlF,KAAM,eACNmF,SAAU,EAAIqB,EACdpB,iBAAkB,CAACd,EAAOxC,UAAWuE,EAAYvE,SAAS,CAAA,CAC3D,CACH,CACD,CAAA,CACF,EAEMoC,CACT,EAAG,EAAE,EAECuC,EAA2BtD,EAAAA,YAAY,CAACa,EAAqCE,IAAgC,CAC7G,GAAA,CAACF,EAASC,OAAe,MAAA,GAE7B,MAAMyC,EAAgB,EACtB,IAAIC,EAAY,EAEhBzC,OAAAA,EAASkC,QAAmBQ,GAAA,CAC1B,OAAQA,EAAQ5G,KAAI,CAClB,IAAK,cACH2G,GAAaC,EAAQzB,SAAW,GAChC,MACF,IAAK,aACHwB,GAAaC,EAAQzB,SAAW,IAChC,MACF,IAAK,OACHwB,GAAaC,EAAQzB,SAAW,IAChC,MACF,IAAK,YACUyB,GAAAA,EAAQzB,SAAW,GAAM,IAAO,GAC7C,MACF,IAAK,eACHwB,GAAaC,EAAQxB,iBAAiBnB,OAAS,EAAI,IAAO,GAC1D,KAAA,CACJ,CACD,EAEMc,KAAK8B,IAAI,GAAK9B,KAAK+B,IAAI,EAAGJ,EAAgBC,CAAS,CAAC,CAC7D,EAAG,EAAE,EAEC9B,EAAsBA,CAACkC,EAAcC,IAAyB,CAClE,GAAI,CAACD,GAAQ,CAACC,EAAa,MAAA,GAC3B,MAAMC,EAASF,EAAKG,YAAY,EAAE7H,MAAM,GAAG,EACrC8H,EAASH,EAAKE,YAAY,EAAE7H,MAAM,GAAG,EAE3C,OADoB4H,EAAOvC,UAAeyC,EAAOhI,SAASiI,CAAI,CAAC,EAC5CnD,OAASc,KAAK8B,IAAII,EAAOhD,OAAQkD,EAAOlD,MAAM,CACnE,EAEA7B,OAAAA,EAAAA,UAAU,IAAM,CACV,GAAA,CAACP,GAAe,CAACc,EAAU,QAEE0E,IAAM,CACrC,MAAMC,EAAW,CAAE,GAAGhE,CAAY,EAEzBE,EAAAA,OAAS3B,EAAYmC,SAAW,CAAC,GAAGnC,EAAYmC,QAAQ,EAAEuD,KAAK,CAACC,EAAGC,IAC1ElB,OAAOkB,EAAE3F,UAAY0F,EAAE1F,SAAS,CAClC,EAAE2C,MAAM,EAAG,EAAE,EAAI,CAAE,EAEbP,MAAAA,EAAWH,EAAuBuD,EAAS9D,MAAM,EACvD8D,EAAS1D,mBAAqBM,EAC9BoD,EAASzD,sBAAwB4C,EAAyBa,EAAS9D,OAAQU,CAAQ,EAEnFoD,EAAS7D,cAAgBsB,KAAK+B,IAAI,GAAKjF,EAAYI,gBAAgByF,kBAAoB,GACrF3C,KAAK+B,IAAI,EAAGnE,EAASsB,OAAS,GAAI,CAAE,EAEtCqD,EAAS5D,mBAAqBqB,KAAK+B,IAAI,EAAG5C,EAASE,OAAO,CAACuD,EAAKC,IAC9DD,GAAOC,EAAE5H,OAAS,eAAiB4H,EAAEzC,SAAW,GAAI,CAAC,CAAC,EAExDmC,EAASxD,eAAiBiB,KAAK8B,IAAI,GAAK,EAAK3C,EAASD,OAAS,GAAK,EACpEqD,EAAS3D,gBAAkBoB,KAAK+B,IAAI,EAAG/B,KAAK8B,IAAI,IAC7CS,EAAS7D,cAAgB6D,EAAS5D,oBAAsB,EAAI4D,EAASzD,qBACxE,CAAC,EAEDN,EAAe+D,CAAQ,CACzB,GAEyB,GACxB,CAACzF,EAAac,EAAUoB,EAAwB0C,CAAwB,CAAC,EAErE,CACL,GAAGnD,EACHuE,gBAAiBvE,EAAYM,mBAAmBkE,KAAUF,GAAAA,EAAE5H,OAAS,MAAM,EAC3E+H,aAAczE,EAAYM,mBAAmBkE,KAAUF,GAAAA,EAAE5H,OAAS,aAAa,EAC/EgI,kBAAmB1E,EAAYM,mBAC5Bc,UAAYkD,EAAE5H,OAAS,aAAe4H,EAAE5B,gBAAgB,EACxDX,IAAIuC,GAAKA,EAAE5B,gBAAiB,CACjC,CACF,EChNMiC,EAAeA,CAAC,CAAE1J,QAAAA,EAAS2J,WAAAA,CAAW,IAAM,CAC1CC,MAAAA,EAAYC,SAAO,IAAI,EACvB,CAACC,EAAeC,CAAgB,EAAI5G,EAAAA,SAAS,EAAK,EAClD,CAAC6G,EAAkBC,CAAmB,EAAI9G,WAAS,CAAE+G,EAAG,EAAGC,EAAG,CAAA,CAAG,EACjEC,EAAmBP,SAAO,IAAI,EAE9B,CACJ3E,cAAAA,EACAC,mBAAAA,EACAC,gBAAAA,EACAE,sBAAAA,EACAC,eAAAA,CAAAA,EACET,EAAiB9E,CAAO,EAEtBqK,EAAuBzF,cAAuB0F,GAAA,CAC9C,GAAA,CAACV,EAAUW,QAAgB,MAAA,CAAEL,EAAG,EAAGC,EAAG,CAAE,EAE5C,MAAMK,EAASZ,EAAUW,QACnBE,EAAOD,EAAOE,sBAAsB,EAGpCC,EAAUL,EAAMM,QAAUN,EAAMM,QAAQ,CAAC,EAAED,QAAUL,EAAMK,QAC3DE,EAAUP,EAAMM,QAAUN,EAAMM,QAAQ,CAAC,EAAEC,QAAUP,EAAMO,QAE1D,MAAA,CACLX,GAAKS,EAAUF,EAAKK,MAAQL,EAAKM,MAASP,EAAOO,MACjDZ,GAAKU,EAAUJ,EAAKO,KAAOP,EAAKQ,OAAUT,EAAOS,MACnD,CACF,EAAG,EAAE,EAECC,EAAyBtG,cAAuB0F,GAAA,CACpDA,EAAMa,eAAe,EACfC,MAAAA,EAASf,EAAqBC,CAAK,EACzCP,EAAiB,EAAI,EACrBE,EAAoBmB,CAAM,EAGtBhB,EAAiBG,SACnBrI,cAAckI,EAAiBG,OAAO,EAIvBA,EAAAA,QAAUvI,YAAY,IAAM,CACrCqJ,MAAAA,EAAUzB,EAAUW,QAAQQ,MAAQ,EACpCO,EAAU1B,EAAUW,QAAQU,OAAS,EAGrCM,EAAKH,EAAOlB,EAAImB,EAChBG,EAAKJ,EAAOjB,EAAImB,EAChBG,EAAWjF,KAAKkF,KAAKH,EAAKA,EAAKC,EAAKA,CAAE,EACtCG,EAAcnF,KAAK+B,IAAI8C,EAASC,CAAO,EAGvC1E,EAAW,EAAIJ,KAAK+B,IAAI,EAAGkD,EAAWE,CAAW,EAG1ChC,IAAA,CACXlI,KAAM,oBACNmK,SAAU,CAAE1B,EAAGkB,EAAOlB,EAAGC,EAAGiB,EAAOjB,CAAE,EACrCvD,SAAAA,EACAjH,aAAcuF,EACd2G,UAAWzG,EACX7B,UAAWuI,KAAKC,IAAI,CAAA,CACrB,GACA,GAAG,GACL,CAAC1B,EAAsBnF,EAAeE,EAAiBuE,CAAU,CAAC,EAE/DqC,EAAwBpH,cAAuB0F,GAAA,CAC9CR,IACLQ,EAAMa,eAAe,EACDd,EAAAA,EAAqBC,CAAK,CAAC,EAAA,EAC9C,CAACR,EAAeO,CAAoB,CAAC,EAElC4B,EAAuBrH,EAAAA,YAAY,IAAM,CAC7CmF,EAAiB,EAAK,EAClBK,EAAiBG,UACnBrI,cAAckI,EAAiBG,OAAO,EACtCH,EAAiBG,QAAU,KAE/B,EAAG,EAAE,EAEL1G,OAAAA,EAAAA,UAAU,IAAM,CACV,GAAA,CAAC+F,EAAUW,QAAS,OAExB,MAAMC,EAASZ,EAAUW,QACnB2B,EAAM1B,EAAO2B,WAAW,IAAI,EAGlC3B,EAAOO,MAAQ,IACfP,EAAOS,OAAS,IAGhBiB,EAAIE,UAAU,EAAG,EAAG5B,EAAOO,MAAOP,EAAOS,MAAM,EAGzCI,MAAAA,EAAUb,EAAOO,MAAQ,EACzBO,EAAUd,EAAOS,OAAS,EAC1BoB,EAAY7F,KAAK+B,IAAI8C,EAASC,CAAO,EAAI,GAGzCgB,EAAWJ,EAAIK,qBACnBlB,EAASC,EAAS,EAClBD,EAASC,EAASe,CACpB,EASA,GAPSG,EAAAA,aAAa,EAAG,sBAAsBhG,KAAK8B,IAAI,GAAKpD,CAAa,CAAC,GAAG,EACrEsH,EAAAA,aAAa,EAAG,qBAAqBhG,KAAK8B,IAAI,IAAMpD,EAAgB,EAAG,CAAC,GAAG,EAEpFgH,EAAIO,UAAYH,EAChBJ,EAAIQ,SAAS,EAAG,EAAGlC,EAAOO,MAAOP,EAAOS,MAAM,EAG1CnB,EAAe,CACjB,MAAM6C,EAAeN,EAAY,GACjCH,EAAIU,YAAc,uBAAuBpG,KAAK8B,IAAI,GAAKlD,CAAe,CAAC,IACvE8G,EAAIW,UAAY,EAEhBX,EAAIY,UAAU,EACVC,EAAAA,IACF/C,EAAiBE,EACjBF,EAAiBG,EACjBwC,EACA,EACAnG,KAAKwG,GAAK,CACZ,EACAd,EAAIe,OAAO,CAAA,CAIb,MAAMC,EAAc1G,KAAK2G,MAAM/H,EAAkB,EAAE,EAAI,EACjDgI,EAAa5G,KAAKwG,GAAK,EAAKE,EAElChB,EAAIU,YAAc,uBAAuBpG,KAAK8B,IAAI,GAAKhD,CAAqB,CAAC,IAC7E4G,EAAIW,UAAY,EAEhB,QAAS7G,EAAI,EAAGA,EAAIkH,EAAalH,IAAK,CACpC,MAAMqH,EAAQrH,EAAIoH,EACZE,EAAS9G,KAAK8B,IAAI,EAAG+D,EAAY7F,KAAKC,IAAIrB,CAAe,EAAIoB,KAAKC,IAAID,KAAK+G,IAAIF,CAAK,CAAC,CAAC,EAE5FnB,EAAIY,UAAU,EACVC,EAAAA,IACF1B,EAAU7E,KAAKgH,IAAIH,CAAK,EAAIC,EAAS,GACrChC,EAAU9E,KAAK+G,IAAIF,CAAK,EAAIC,EAAS,GACrC9G,KAAK8B,IAAI,EAAGgF,EAAS,EAAG,EACxB,EACA9G,KAAKwG,GAAK,CACZ,EACAd,EAAIe,OAAO,CAAA,CAIb,GAAI9H,EAAqB,GAAK,CAC5B,MAAMsI,EAAWjH,KAAK2G,MAAMhI,EAAqB,CAAC,EAAI,EAEtD+G,EAAIU,YAAc,uBAAuBpG,KAAK8B,IAAI,GAAKnD,CAAkB,CAAC,IAC1E+G,EAAIW,UAAY,EAEhB,QAAS7G,EAAI,EAAGA,EAAIyH,EAAUzH,IAAK,CACjC,MAAM0H,EAASlH,KAAKmH,OAAO,EAAInH,KAAKwG,GAAK,EACnCY,EAASF,EAASlH,KAAKwG,IAAMxG,KAAKmH,OAAW,EAAA,IAC7CL,EAASjB,EAAY,GAE3BH,EAAIY,UAAU,EACdZ,EAAI2B,OACFxC,EAAU7E,KAAKgH,IAAIE,CAAM,EAAIJ,EAC7BhC,EAAU9E,KAAK+G,IAAIG,CAAM,EAAIJ,CAC/B,EACApB,EAAI4B,cACFzC,EAAU7E,KAAKgH,IAAIE,CAAM,EAAIJ,EAAS,GACtChC,EAAU9E,KAAK+G,IAAIG,CAAM,EAAIJ,EAAS,GACtCjC,EAAU7E,KAAKgH,IAAII,CAAM,EAAIN,EAAS,GACtChC,EAAU9E,KAAK+G,IAAIK,CAAM,EAAIN,EAAS,GACtCjC,EAAU7E,KAAKgH,IAAII,CAAM,EAAIN,EAC7BhC,EAAU9E,KAAK+G,IAAIK,CAAM,EAAIN,CAC/B,EACApB,EAAIe,OAAO,CAAA,CACb,CAIFf,EAAIU,YAAc,uBAAuBpG,KAAK8B,IAAI,GAAK/C,CAAc,CAAC,IACtE2G,EAAIW,UAAY,EAEhB,MAAMkB,EAAa1B,EAAY,GAC/BH,EAAIY,UAAU,EACdZ,EAAI2B,OAAOxC,EAAU0C,EAAYzC,EAAUyC,CAAU,EACrD7B,EAAI8B,OAAO3C,EAAU0C,EAAYzC,EAAUyC,CAAU,EACrD7B,EAAI2B,OAAOxC,EAAU0C,EAAYzC,EAAUyC,CAAU,EACrD7B,EAAI8B,OAAO3C,EAAU0C,EAAYzC,EAAUyC,CAAU,EACrD7B,EAAIe,OAAO,CAAA,EAEV,CAAC/H,EAAeC,EAAoBC,EAAiBE,EAAuBC,EAAgBuE,EAAeE,CAAgB,CAAC,EAE/HnG,EAAAA,UAAU,IAED,IAAM,CACPuG,EAAiBG,SACnBrI,cAAckI,EAAiBG,OAAO,CAE1C,EACC,EAAE,SAGH,MAAA,CAAK0D,UAAU,uCAAsCC,UACnDC,EAAAA,IAAA,SAAA,CACEC,IAAKxE,EACLqE,UAAU,qDACVI,MAAO,CAAEC,WAAY,oBAAqB,EAC1CC,YAAarD,EACbsD,YAAaxC,EACbyC,UAAWxC,EACXyC,aAAczC,EACd0C,aAAczD,EACd0D,YAAa5C,EACb6C,WAAY5C,CAAAA,CACb,EACD6C,EAAAA,KAAA,MAAA,CAAKb,UAAU,8EAA6EC,UAC1FY,EAAAA,KAAA,MAAA,CAAAZ,SAAK,CAAA,QAAMhJ,EAAgB,KAAK6J,QAAQ,CAAC,EAAE,GAAC,CAAA,CAAK,EACjDD,EAAAA,KAAA,MAAA,CAAAZ,SAAK,CAAA,QAAM/I,EAAqB,KAAK4J,QAAQ,CAAC,EAAE,GAAC,CAAA,CAAK,EACtDD,EAAAA,KAAA,MAAA,CAAAZ,SAAK,CAAA,QAAM9I,EAAkB,KAAK2J,QAAQ,CAAC,EAAE,GAAC,CAAA,CAAK,EACnDD,EAAAA,KAAA,MAAA,CAAAZ,SAAK,CAAA,QAAM5I,EAAwB,KAAKyJ,QAAQ,CAAC,EAAE,GAAC,CAAA,CAAK,EACzDD,EAAAA,KAAA,MAAA,CAAAZ,SAAK,CAAA,QAAM3I,EAAiB,KAAKwJ,QAAQ,CAAC,EAAE,GAAC,CAAA,CAAK,CAAC,CAAA,CAChD,CAAC,CAAA,CACH,CAET,EC5NMC,EAKDA,CAAC,CAAEC,KAAAA,EAAMC,MAAAA,EAAOC,YAAAA,EAAaC,MAAAA,EAAQ,CAAE,IAAM,CAChD,MAAMC,EAAqBC,EAAiB,EAG1CR,OAAAA,EAAAA,KAACS,EAAOC,IAAG,CACTC,QAASJ,EAAqB,CAAEK,QAAS,EAAGvF,EAAG,CAAA,EAAM,CAAEuF,QAAS,EAAGvF,EAAG,EAAG,EACzEwF,YAAaN,EAAqB,CAAEK,QAAS,EAAGvF,EAAG,CAAA,EAAM,CAAEuF,QAAS,EAAGvF,EAAG,CAAE,EAC5EyF,SAAU,CAAEC,KAAM,EAAK,EACvBC,WAAY,CAAEV,MAAAA,CAAM,EACpBnB,UAAU,4DAA2DC,UAErEC,EAAAA,IAAA,MAAA,CAAKF,UAAU,8EAA6EC,SACzFe,CAAAA,CACE,EACLd,EAAAA,IAAA,KAAA,CAAIF,UAAU,6CAA4CC,SACvDgB,CAAAA,CACC,EACJf,EAAAA,IAAA,IAAA,CAAGF,UAAU,gBAAeC,SACzBiB,CAAAA,CACA,CAAC,CAAA,CACM,CAEhB,EAEaY,GAAwBA,IAAM,CACnC,KAAA,CAAEC,MAAAA,GAAUhN,EAAQ,EACpBiN,EAAWC,EAAY,EACvBb,EAAqBC,EAAiB,EAEtCa,EAAe,SAAY,CAC/B,MAAMH,EAAM,EACZC,EAAS,gBAAgB,CAC3B,EAEA,cACE,MAAA,CAAKhC,UAAU,mCAAkCC,UAE/CY,EAAAA,KAAA,MAAA,CAAKb,UAAU,qEAAoEC,SAAA,CACjFC,EAAAA,IAACiC,EAAa,CAAAlC,eACZ,MAAA,CAAKD,UAAU,uBAAsBC,eAClCxE,EAAY,CAAC9C,SAAU,GAAKqH,UAAU,0BAA4B,CAAA,CAChE,CAAA,CAAA,CACQ,EAEfa,EAAAA,KAAA,MAAA,CAAKb,UAAU,mDAAkDC,SAC/DC,CAACoB,EAAAA,IAAAA,EAAOc,GAAE,CACRZ,QAASJ,EAAqB,CAAEK,QAAS,CAAA,EAAM,CAAEvF,EAAG,GAAIuF,QAAS,CAAE,EACnEY,QAASjB,EAAqB,CAAEK,QAAS,CAAA,EAAM,CAAEvF,EAAG,EAAGuF,QAAS,CAAE,EAClEzB,UAAU,sGACkCC,SAC7C,oBAAA,CAEU,EAEVqB,EAAAA,IAAAA,EAAOlG,EAAC,CACPoG,QAASJ,EAAqB,CAAEK,QAAS,CAAA,EAAM,CAAEvF,EAAG,GAAIuF,QAAS,CAAE,EACnEY,QAASjB,EAAqB,CAAEK,QAAS,CAAA,EAAM,CAAEvF,EAAG,EAAGuF,QAAS,CAAE,EAClEI,WAAY,CAAEV,MAAO,EAAI,EACzBnB,UAAU,6BAA4BC,SACvC,wDAAA,CAES,EAETqB,EAAAA,KAAAA,EAAOgB,OAAM,CACZd,QAASJ,EAAqB,CAAEK,QAAS,CAAA,EAAM,CAAEvF,EAAG,GAAIuF,QAAS,CAAE,EACnEY,QAASjB,EAAqB,CAAEK,QAAS,CAAA,EAAM,CAAEvF,EAAG,EAAGuF,QAAS,CAAE,EAClEI,WAAY,CAAEV,MAAO,EAAI,EACzBoB,QAASL,EACTlC,UAAU,+JAEkDC,SAAA,CAE5DC,EAAAA,IAAC/O,EAAO,CAAC6O,UAAU,SAAA,CAAW,EAC9BE,EAAAA,IAAA,OAAA,CAAAD,SAAM,gCAAA,CAAoC,CAAC,CAAA,CAC9B,CAAC,CAAA,CACb,EAGLY,EAAAA,KAAA,MAAA,CAAKb,UAAU,uCAAsCC,UACnDC,EAAAA,IAAA,MAAA,CAAKF,UAAU,wGAAA,CAEU,EACzBE,EAAAA,IAAA,MAAA,CAAKF,UAAU,0GAAA,CAEU,CAAC,CAAA,CACvB,CAAC,CAAA,CACH,EAGLE,EAAAA,IAAA,MAAA,CAAKF,UAAU,uBAAsBC,eACnC,MAAA,CAAKD,UAAU,yBAAwBC,eACrC,MAAA,CAAKD,UAAU,wCAAuCC,eACnDkC,EAAa,CAAAlC,gBACXuC,WAAQ,CAACC,SAAU,KAAKxC,SAAA,CACvBC,EAAAA,IAACa,EAAa,CACZC,WAAOhQ,EAAK,CAACgP,UAAU,yBAAA,CAA2B,EAClDiB,MAAM,wBACNC,YAAY,oGAAA,CACb,EACDhB,EAAAA,IAACa,EAAa,CACZC,WAAO9P,EAAG,CAAC8O,UAAU,uBAAA,CAAyB,EAC9CiB,MAAM,wBACNC,YAAY,gFACZC,MAAO,EAAA,CACR,EACDjB,EAAAA,IAACa,EAAa,CACZC,WAAO5P,EAAG,CAAC4O,UAAU,uBAAA,CAAyB,EAC9CiB,MAAM,qBACNC,YAAY,0EACZC,MAAO,EAAA,CACR,CAAC,CACM,CAAA,CACG,CAAA,CACZ,CAAA,CACF,CAAA,CAAA,CACF,CAAC,CAAA,CACH,CAET","x_google_ignoreList":[0,1,2,3]}