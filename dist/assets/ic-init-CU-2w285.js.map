{"version":3,"file":"ic-init-CU-2w285.js","sources":["../../node_modules/@dfinity/agent/lib/esm/agent/index.js","../../node_modules/@dfinity/agent/lib/esm/polling/strategy.js","../../node_modules/@dfinity/agent/lib/esm/polling/index.js","../../node_modules/@dfinity/agent/lib/esm/canisters/management_idl.js","../../node_modules/@dfinity/agent/lib/esm/actor.js","../../src/declarations/anima/anima.did.js","../../src/declarations/anima/index.js","../../src/ic-init.ts"],"sourcesContent":["export * from './api';\nexport * from './http';\nexport * from './http/errors';\nexport * from './proxy';\nexport function getDefaultAgent() {\n    const agent = typeof window === 'undefined'\n        ? typeof global === 'undefined'\n            ? typeof self === 'undefined'\n                ? undefined\n                : self.ic.agent\n            : global.ic.agent\n        : window.ic.agent;\n    if (!agent) {\n        throw new Error('No Agent could be found.');\n    }\n    return agent;\n}\n//# sourceMappingURL=index.js.map","import { toHex } from '../utils/buffer';\nconst FIVE_MINUTES_IN_MSEC = 5 * 60 * 1000;\n/**\n * A best practices polling strategy: wait 2 seconds before the first poll, then 1 second\n * with an exponential backoff factor of 1.2. Timeout after 5 minutes.\n */\nexport function defaultStrategy() {\n    return chain(conditionalDelay(once(), 1000), backoff(1000, 1.2), timeout(FIVE_MINUTES_IN_MSEC));\n}\n/**\n * Predicate that returns true once.\n */\nexport function once() {\n    let first = true;\n    return async () => {\n        if (first) {\n            first = false;\n            return true;\n        }\n        return false;\n    };\n}\n/**\n * Delay the polling once.\n * @param condition A predicate that indicates when to delay.\n * @param timeInMsec The amount of time to delay.\n */\nexport function conditionalDelay(condition, timeInMsec) {\n    return async (canisterId, requestId, status) => {\n        if (await condition(canisterId, requestId, status)) {\n            return new Promise(resolve => setTimeout(resolve, timeInMsec));\n        }\n    };\n}\n/**\n * Error out after a maximum number of polling has been done.\n * @param count The maximum attempts to poll.\n */\nexport function maxAttempts(count) {\n    let attempts = count;\n    return async (canisterId, requestId, status) => {\n        if (--attempts <= 0) {\n            throw new Error(`Failed to retrieve a reply for request after ${count} attempts:\\n` +\n                `  Request ID: ${toHex(requestId)}\\n` +\n                `  Request status: ${status}\\n`);\n        }\n    };\n}\n/**\n * Throttle polling.\n * @param throttleInMsec Amount in millisecond to wait between each polling.\n */\nexport function throttle(throttleInMsec) {\n    return () => new Promise(resolve => setTimeout(resolve, throttleInMsec));\n}\n/**\n * Reject a call after a certain amount of time.\n * @param timeInMsec Time in milliseconds before the polling should be rejected.\n */\nexport function timeout(timeInMsec) {\n    const end = Date.now() + timeInMsec;\n    return async (canisterId, requestId, status) => {\n        if (Date.now() > end) {\n            throw new Error(`Request timed out after ${timeInMsec} msec:\\n` +\n                `  Request ID: ${toHex(requestId)}\\n` +\n                `  Request status: ${status}\\n`);\n        }\n    };\n}\n/**\n * A strategy that throttle, but using an exponential backoff strategy.\n * @param startingThrottleInMsec The throttle in milliseconds to start with.\n * @param backoffFactor The factor to multiple the throttle time between every poll. For\n *   example if using 2, the throttle will double between every run.\n */\nexport function backoff(startingThrottleInMsec, backoffFactor) {\n    let currentThrottling = startingThrottleInMsec;\n    return () => new Promise(resolve => setTimeout(() => {\n        currentThrottling *= backoffFactor;\n        resolve();\n    }, currentThrottling));\n}\n/**\n * Chain multiple polling strategy. This _chains_ the strategies, so if you pass in,\n * say, two throttling strategy of 1 second, it will result in a throttle of 2 seconds.\n * @param strategies A strategy list to chain.\n */\nexport function chain(...strategies) {\n    return async (canisterId, requestId, status) => {\n        for (const a of strategies) {\n            await a(canisterId, requestId, status);\n        }\n    };\n}\n//# sourceMappingURL=strategy.js.map","import { RequestStatusResponseStatus } from '../agent';\nimport { Certificate, lookupResultToBuffer } from '../certificate';\nimport { toHex } from '../utils/buffer';\nexport * as strategy from './strategy';\nexport { defaultStrategy } from './strategy';\n/**\n * Polls the IC to check the status of the given request then\n * returns the response bytes once the request has been processed.\n * @param agent The agent to use to poll read_state.\n * @param canisterId The effective canister ID.\n * @param requestId The Request ID to poll status for.\n * @param strategy A polling strategy.\n * @param request Request for the readState call.\n * @param blsVerify - optional replacement function that verifies the BLS signature of a certificate.\n */\nexport async function pollForResponse(agent, canisterId, requestId, strategy, \n// eslint-disable-next-line\nrequest, blsVerify) {\n    var _a;\n    const path = [new TextEncoder().encode('request_status'), requestId];\n    const currentRequest = request !== null && request !== void 0 ? request : (await ((_a = agent.createReadStateRequest) === null || _a === void 0 ? void 0 : _a.call(agent, { paths: [path] })));\n    const state = await agent.readState(canisterId, { paths: [path] }, undefined, currentRequest);\n    if (agent.rootKey == null)\n        throw new Error('Agent root key not initialized before polling');\n    const cert = await Certificate.create({\n        certificate: state.certificate,\n        rootKey: agent.rootKey,\n        canisterId: canisterId,\n        blsVerify,\n    });\n    const maybeBuf = lookupResultToBuffer(cert.lookup([...path, new TextEncoder().encode('status')]));\n    let status;\n    if (typeof maybeBuf === 'undefined') {\n        // Missing requestId means we need to wait\n        status = RequestStatusResponseStatus.Unknown;\n    }\n    else {\n        status = new TextDecoder().decode(maybeBuf);\n    }\n    switch (status) {\n        case RequestStatusResponseStatus.Replied: {\n            return lookupResultToBuffer(cert.lookup([...path, 'reply']));\n        }\n        case RequestStatusResponseStatus.Received:\n        case RequestStatusResponseStatus.Unknown:\n        case RequestStatusResponseStatus.Processing:\n            // Execute the polling strategy, then retry.\n            await strategy(canisterId, requestId, status);\n            return pollForResponse(agent, canisterId, requestId, strategy, currentRequest);\n        case RequestStatusResponseStatus.Rejected: {\n            const rejectCode = new Uint8Array(lookupResultToBuffer(cert.lookup([...path, 'reject_code'])))[0];\n            const rejectMessage = new TextDecoder().decode(lookupResultToBuffer(cert.lookup([...path, 'reject_message'])));\n            throw new Error(`Call was rejected:\\n` +\n                `  Request ID: ${toHex(requestId)}\\n` +\n                `  Reject code: ${rejectCode}\\n` +\n                `  Reject text: ${rejectMessage}\\n`);\n        }\n        case RequestStatusResponseStatus.Done:\n            // This is _technically_ not an error, but we still didn't see the `Replied` status so\n            // we don't know the result and cannot decode it.\n            throw new Error(`Call was marked as done but we never saw the reply:\\n` +\n                `  Request ID: ${toHex(requestId)}\\n`);\n    }\n    throw new Error('unreachable');\n}\n//# sourceMappingURL=index.js.map","/*\n * This file is generated from the candid for asset management.\n * didc version: 0.4.0\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport default ({ IDL }) => {\n    const bitcoin_network = IDL.Variant({\n        mainnet: IDL.Null,\n        testnet: IDL.Null,\n    });\n    const bitcoin_address = IDL.Text;\n    const bitcoin_get_balance_args = IDL.Record({\n        network: bitcoin_network,\n        address: bitcoin_address,\n        min_confirmations: IDL.Opt(IDL.Nat32),\n    });\n    const satoshi = IDL.Nat64;\n    const bitcoin_get_balance_result = satoshi;\n    const bitcoin_get_current_fee_percentiles_args = IDL.Record({\n        network: bitcoin_network,\n    });\n    const millisatoshi_per_byte = IDL.Nat64;\n    const bitcoin_get_current_fee_percentiles_result = IDL.Vec(millisatoshi_per_byte);\n    const bitcoin_get_utxos_args = IDL.Record({\n        network: bitcoin_network,\n        filter: IDL.Opt(IDL.Variant({\n            page: IDL.Vec(IDL.Nat8),\n            min_confirmations: IDL.Nat32,\n        })),\n        address: bitcoin_address,\n    });\n    const block_hash = IDL.Vec(IDL.Nat8);\n    const outpoint = IDL.Record({\n        txid: IDL.Vec(IDL.Nat8),\n        vout: IDL.Nat32,\n    });\n    const utxo = IDL.Record({\n        height: IDL.Nat32,\n        value: satoshi,\n        outpoint: outpoint,\n    });\n    const bitcoin_get_utxos_result = IDL.Record({\n        next_page: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        tip_height: IDL.Nat32,\n        tip_block_hash: block_hash,\n        utxos: IDL.Vec(utxo),\n    });\n    const bitcoin_send_transaction_args = IDL.Record({\n        transaction: IDL.Vec(IDL.Nat8),\n        network: bitcoin_network,\n    });\n    const canister_id = IDL.Principal;\n    const canister_info_args = IDL.Record({\n        canister_id: canister_id,\n        num_requested_changes: IDL.Opt(IDL.Nat64),\n    });\n    const change_origin = IDL.Variant({\n        from_user: IDL.Record({ user_id: IDL.Principal }),\n        from_canister: IDL.Record({\n            canister_version: IDL.Opt(IDL.Nat64),\n            canister_id: IDL.Principal,\n        }),\n    });\n    const change_details = IDL.Variant({\n        creation: IDL.Record({ controllers: IDL.Vec(IDL.Principal) }),\n        code_deployment: IDL.Record({\n            mode: IDL.Variant({\n                reinstall: IDL.Null,\n                upgrade: IDL.Null,\n                install: IDL.Null,\n            }),\n            module_hash: IDL.Vec(IDL.Nat8),\n        }),\n        controllers_change: IDL.Record({\n            controllers: IDL.Vec(IDL.Principal),\n        }),\n        code_uninstall: IDL.Null,\n    });\n    const change = IDL.Record({\n        timestamp_nanos: IDL.Nat64,\n        canister_version: IDL.Nat64,\n        origin: change_origin,\n        details: change_details,\n    });\n    const canister_info_result = IDL.Record({\n        controllers: IDL.Vec(IDL.Principal),\n        module_hash: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        recent_changes: IDL.Vec(change),\n        total_num_changes: IDL.Nat64,\n    });\n    const canister_status_args = IDL.Record({ canister_id: canister_id });\n    const log_visibility = IDL.Variant({\n        controllers: IDL.Null,\n        public: IDL.Null,\n    });\n    const definite_canister_settings = IDL.Record({\n        freezing_threshold: IDL.Nat,\n        controllers: IDL.Vec(IDL.Principal),\n        reserved_cycles_limit: IDL.Nat,\n        log_visibility: log_visibility,\n        wasm_memory_limit: IDL.Nat,\n        memory_allocation: IDL.Nat,\n        compute_allocation: IDL.Nat,\n    });\n    const canister_status_result = IDL.Record({\n        status: IDL.Variant({\n            stopped: IDL.Null,\n            stopping: IDL.Null,\n            running: IDL.Null,\n        }),\n        memory_size: IDL.Nat,\n        cycles: IDL.Nat,\n        settings: definite_canister_settings,\n        query_stats: IDL.Record({\n            response_payload_bytes_total: IDL.Nat,\n            num_instructions_total: IDL.Nat,\n            num_calls_total: IDL.Nat,\n            request_payload_bytes_total: IDL.Nat,\n        }),\n        idle_cycles_burned_per_day: IDL.Nat,\n        module_hash: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        reserved_cycles: IDL.Nat,\n    });\n    const clear_chunk_store_args = IDL.Record({ canister_id: canister_id });\n    const canister_settings = IDL.Record({\n        freezing_threshold: IDL.Opt(IDL.Nat),\n        controllers: IDL.Opt(IDL.Vec(IDL.Principal)),\n        reserved_cycles_limit: IDL.Opt(IDL.Nat),\n        log_visibility: IDL.Opt(log_visibility),\n        wasm_memory_limit: IDL.Opt(IDL.Nat),\n        memory_allocation: IDL.Opt(IDL.Nat),\n        compute_allocation: IDL.Opt(IDL.Nat),\n    });\n    const create_canister_args = IDL.Record({\n        settings: IDL.Opt(canister_settings),\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const create_canister_result = IDL.Record({ canister_id: canister_id });\n    const delete_canister_args = IDL.Record({ canister_id: canister_id });\n    const deposit_cycles_args = IDL.Record({ canister_id: canister_id });\n    const ecdsa_curve = IDL.Variant({ secp256k1: IDL.Null });\n    const ecdsa_public_key_args = IDL.Record({\n        key_id: IDL.Record({ name: IDL.Text, curve: ecdsa_curve }),\n        canister_id: IDL.Opt(canister_id),\n        derivation_path: IDL.Vec(IDL.Vec(IDL.Nat8)),\n    });\n    const ecdsa_public_key_result = IDL.Record({\n        public_key: IDL.Vec(IDL.Nat8),\n        chain_code: IDL.Vec(IDL.Nat8),\n    });\n    const fetch_canister_logs_args = IDL.Record({ canister_id: canister_id });\n    const canister_log_record = IDL.Record({\n        idx: IDL.Nat64,\n        timestamp_nanos: IDL.Nat64,\n        content: IDL.Vec(IDL.Nat8),\n    });\n    const fetch_canister_logs_result = IDL.Record({\n        canister_log_records: IDL.Vec(canister_log_record),\n    });\n    const http_header = IDL.Record({ value: IDL.Text, name: IDL.Text });\n    const http_request_result = IDL.Record({\n        status: IDL.Nat,\n        body: IDL.Vec(IDL.Nat8),\n        headers: IDL.Vec(http_header),\n    });\n    const http_request_args = IDL.Record({\n        url: IDL.Text,\n        method: IDL.Variant({\n            get: IDL.Null,\n            head: IDL.Null,\n            post: IDL.Null,\n        }),\n        max_response_bytes: IDL.Opt(IDL.Nat64),\n        body: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        transform: IDL.Opt(IDL.Record({\n            function: IDL.Func([\n                IDL.Record({\n                    context: IDL.Vec(IDL.Nat8),\n                    response: http_request_result,\n                }),\n            ], [http_request_result], ['query']),\n            context: IDL.Vec(IDL.Nat8),\n        })),\n        headers: IDL.Vec(http_header),\n    });\n    const canister_install_mode = IDL.Variant({\n        reinstall: IDL.Null,\n        upgrade: IDL.Opt(IDL.Record({\n            wasm_memory_persistence: IDL.Opt(IDL.Variant({ keep: IDL.Null, replace: IDL.Null })),\n            skip_pre_upgrade: IDL.Opt(IDL.Bool),\n        })),\n        install: IDL.Null,\n    });\n    const chunk_hash = IDL.Record({ hash: IDL.Vec(IDL.Nat8) });\n    const install_chunked_code_args = IDL.Record({\n        arg: IDL.Vec(IDL.Nat8),\n        wasm_module_hash: IDL.Vec(IDL.Nat8),\n        mode: canister_install_mode,\n        chunk_hashes_list: IDL.Vec(chunk_hash),\n        target_canister: canister_id,\n        store_canister: IDL.Opt(canister_id),\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const wasm_module = IDL.Vec(IDL.Nat8);\n    const install_code_args = IDL.Record({\n        arg: IDL.Vec(IDL.Nat8),\n        wasm_module: wasm_module,\n        mode: canister_install_mode,\n        canister_id: canister_id,\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const node_metrics_history_args = IDL.Record({\n        start_at_timestamp_nanos: IDL.Nat64,\n        subnet_id: IDL.Principal,\n    });\n    const node_metrics = IDL.Record({\n        num_block_failures_total: IDL.Nat64,\n        node_id: IDL.Principal,\n        num_blocks_proposed_total: IDL.Nat64,\n    });\n    const node_metrics_history_result = IDL.Vec(IDL.Record({\n        timestamp_nanos: IDL.Nat64,\n        node_metrics: IDL.Vec(node_metrics),\n    }));\n    const provisional_create_canister_with_cycles_args = IDL.Record({\n        settings: IDL.Opt(canister_settings),\n        specified_id: IDL.Opt(canister_id),\n        amount: IDL.Opt(IDL.Nat),\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const provisional_create_canister_with_cycles_result = IDL.Record({\n        canister_id: canister_id,\n    });\n    const provisional_top_up_canister_args = IDL.Record({\n        canister_id: canister_id,\n        amount: IDL.Nat,\n    });\n    const raw_rand_result = IDL.Vec(IDL.Nat8);\n    const sign_with_ecdsa_args = IDL.Record({\n        key_id: IDL.Record({ name: IDL.Text, curve: ecdsa_curve }),\n        derivation_path: IDL.Vec(IDL.Vec(IDL.Nat8)),\n        message_hash: IDL.Vec(IDL.Nat8),\n    });\n    const sign_with_ecdsa_result = IDL.Record({\n        signature: IDL.Vec(IDL.Nat8),\n    });\n    const start_canister_args = IDL.Record({ canister_id: canister_id });\n    const stop_canister_args = IDL.Record({ canister_id: canister_id });\n    const stored_chunks_args = IDL.Record({ canister_id: canister_id });\n    const stored_chunks_result = IDL.Vec(chunk_hash);\n    const uninstall_code_args = IDL.Record({\n        canister_id: canister_id,\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const update_settings_args = IDL.Record({\n        canister_id: IDL.Principal,\n        settings: canister_settings,\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const upload_chunk_args = IDL.Record({\n        chunk: IDL.Vec(IDL.Nat8),\n        canister_id: IDL.Principal,\n    });\n    const upload_chunk_result = chunk_hash;\n    return IDL.Service({\n        bitcoin_get_balance: IDL.Func([bitcoin_get_balance_args], [bitcoin_get_balance_result], []),\n        bitcoin_get_current_fee_percentiles: IDL.Func([bitcoin_get_current_fee_percentiles_args], [bitcoin_get_current_fee_percentiles_result], []),\n        bitcoin_get_utxos: IDL.Func([bitcoin_get_utxos_args], [bitcoin_get_utxos_result], []),\n        bitcoin_send_transaction: IDL.Func([bitcoin_send_transaction_args], [], []),\n        canister_info: IDL.Func([canister_info_args], [canister_info_result], []),\n        canister_status: IDL.Func([canister_status_args], [canister_status_result], []),\n        clear_chunk_store: IDL.Func([clear_chunk_store_args], [], []),\n        create_canister: IDL.Func([create_canister_args], [create_canister_result], []),\n        delete_canister: IDL.Func([delete_canister_args], [], []),\n        deposit_cycles: IDL.Func([deposit_cycles_args], [], []),\n        ecdsa_public_key: IDL.Func([ecdsa_public_key_args], [ecdsa_public_key_result], []),\n        fetch_canister_logs: IDL.Func([fetch_canister_logs_args], [fetch_canister_logs_result], ['query']),\n        http_request: IDL.Func([http_request_args], [http_request_result], []),\n        install_chunked_code: IDL.Func([install_chunked_code_args], [], []),\n        install_code: IDL.Func([install_code_args], [], []),\n        node_metrics_history: IDL.Func([node_metrics_history_args], [node_metrics_history_result], []),\n        provisional_create_canister_with_cycles: IDL.Func([provisional_create_canister_with_cycles_args], [provisional_create_canister_with_cycles_result], []),\n        provisional_top_up_canister: IDL.Func([provisional_top_up_canister_args], [], []),\n        raw_rand: IDL.Func([], [raw_rand_result], []),\n        sign_with_ecdsa: IDL.Func([sign_with_ecdsa_args], [sign_with_ecdsa_result], []),\n        start_canister: IDL.Func([start_canister_args], [], []),\n        stop_canister: IDL.Func([stop_canister_args], [], []),\n        stored_chunks: IDL.Func([stored_chunks_args], [stored_chunks_result], []),\n        uninstall_code: IDL.Func([uninstall_code_args], [], []),\n        update_settings: IDL.Func([update_settings_args], [], []),\n        upload_chunk: IDL.Func([upload_chunk_args], [upload_chunk_result], []),\n    });\n};\n//# sourceMappingURL=management_idl.js.map","import { Buffer } from 'buffer/';\nimport { getDefaultAgent, ReplicaRejectCode, } from './agent';\nimport { AgentError } from './errors';\nimport { IDL } from '@dfinity/candid';\nimport { pollForResponse, strategy } from './polling';\nimport { Principal } from '@dfinity/principal';\nimport { toHex } from './utils/buffer';\nimport managementCanisterIdl from './canisters/management_idl';\nexport class ActorCallError extends AgentError {\n    constructor(canisterId, methodName, type, props) {\n        super([\n            `Call failed:`,\n            `  Canister: ${canisterId.toText()}`,\n            `  Method: ${methodName} (${type})`,\n            ...Object.getOwnPropertyNames(props).map(n => `  \"${n}\": ${JSON.stringify(props[n])}`),\n        ].join('\\n'));\n        this.canisterId = canisterId;\n        this.methodName = methodName;\n        this.type = type;\n        this.props = props;\n    }\n}\nexport class QueryCallRejectedError extends ActorCallError {\n    constructor(canisterId, methodName, result) {\n        var _a;\n        super(canisterId, methodName, 'query', {\n            Status: result.status,\n            Code: (_a = ReplicaRejectCode[result.reject_code]) !== null && _a !== void 0 ? _a : `Unknown Code \"${result.reject_code}\"`,\n            Message: result.reject_message,\n        });\n        this.result = result;\n    }\n}\nexport class UpdateCallRejectedError extends ActorCallError {\n    constructor(canisterId, methodName, requestId, response) {\n        super(canisterId, methodName, 'update', Object.assign({ 'Request ID': toHex(requestId) }, (response.body\n            ? Object.assign(Object.assign({}, (response.body.error_code\n                ? {\n                    'Error code': response.body.error_code,\n                }\n                : {})), { 'Reject code': String(response.body.reject_code), 'Reject message': response.body.reject_message }) : {\n            'HTTP status code': response.status.toString(),\n            'HTTP status text': response.statusText,\n        })));\n        this.requestId = requestId;\n        this.response = response;\n    }\n}\nconst metadataSymbol = Symbol.for('ic-agent-metadata');\n/**\n * An actor base class. An actor is an object containing only functions that will\n * return a promise. These functions are derived from the IDL definition.\n */\nexport class Actor {\n    constructor(metadata) {\n        this[metadataSymbol] = Object.freeze(metadata);\n    }\n    /**\n     * Get the Agent class this Actor would call, or undefined if the Actor would use\n     * the default agent (global.ic.agent).\n     * @param actor The actor to get the agent of.\n     */\n    static agentOf(actor) {\n        return actor[metadataSymbol].config.agent;\n    }\n    /**\n     * Get the interface of an actor, in the form of an instance of a Service.\n     * @param actor The actor to get the interface of.\n     */\n    static interfaceOf(actor) {\n        return actor[metadataSymbol].service;\n    }\n    static canisterIdOf(actor) {\n        return Principal.from(actor[metadataSymbol].config.canisterId);\n    }\n    static async install(fields, config) {\n        const mode = fields.mode === undefined ? { install: null } : fields.mode;\n        // Need to transform the arg into a number array.\n        const arg = fields.arg ? [...new Uint8Array(fields.arg)] : [];\n        // Same for module.\n        const wasmModule = [...new Uint8Array(fields.module)];\n        const canisterId = typeof config.canisterId === 'string'\n            ? Principal.fromText(config.canisterId)\n            : config.canisterId;\n        await getManagementCanister(config).install_code({\n            mode,\n            arg,\n            wasm_module: wasmModule,\n            canister_id: canisterId,\n            sender_canister_version: [],\n        });\n    }\n    static async createCanister(config, settings) {\n        function settingsToCanisterSettings(settings) {\n            return [\n                {\n                    controllers: settings.controllers ? [settings.controllers] : [],\n                    compute_allocation: settings.compute_allocation ? [settings.compute_allocation] : [],\n                    freezing_threshold: settings.freezing_threshold ? [settings.freezing_threshold] : [],\n                    memory_allocation: settings.memory_allocation ? [settings.memory_allocation] : [],\n                    reserved_cycles_limit: [],\n                    log_visibility: [],\n                    wasm_memory_limit: [],\n                },\n            ];\n        }\n        const { canister_id: canisterId } = await getManagementCanister(config || {}).provisional_create_canister_with_cycles({\n            amount: [],\n            settings: settingsToCanisterSettings(settings || {}),\n            specified_id: [],\n            sender_canister_version: [],\n        });\n        return canisterId;\n    }\n    static async createAndInstallCanister(interfaceFactory, fields, config) {\n        const canisterId = await this.createCanister(config);\n        await this.install(Object.assign({}, fields), Object.assign(Object.assign({}, config), { canisterId }));\n        return this.createActor(interfaceFactory, Object.assign(Object.assign({}, config), { canisterId }));\n    }\n    static createActorClass(interfaceFactory, options) {\n        const service = interfaceFactory({ IDL });\n        class CanisterActor extends Actor {\n            constructor(config) {\n                if (!config.canisterId)\n                    throw new AgentError(`Canister ID is required, but received ${typeof config.canisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`);\n                const canisterId = typeof config.canisterId === 'string'\n                    ? Principal.fromText(config.canisterId)\n                    : config.canisterId;\n                super({\n                    config: Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), config), { canisterId }),\n                    service,\n                });\n                for (const [methodName, func] of service._fields) {\n                    if (options === null || options === void 0 ? void 0 : options.httpDetails) {\n                        func.annotations.push(ACTOR_METHOD_WITH_HTTP_DETAILS);\n                    }\n                    this[methodName] = _createActorMethod(this, methodName, func, config.blsVerify);\n                }\n            }\n        }\n        return CanisterActor;\n    }\n    static createActor(interfaceFactory, configuration) {\n        if (!configuration.canisterId) {\n            throw new AgentError(`Canister ID is required, but received ${typeof configuration.canisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`);\n        }\n        return new (this.createActorClass(interfaceFactory))(configuration);\n    }\n    static createActorWithHttpDetails(interfaceFactory, configuration) {\n        return new (this.createActorClass(interfaceFactory, { httpDetails: true }))(configuration);\n    }\n}\n// IDL functions can have multiple return values, so decoding always\n// produces an array. Ensure that functions with single or zero return\n// values behave as expected.\nfunction decodeReturnValue(types, msg) {\n    const returnValues = IDL.decode(types, Buffer.from(msg));\n    switch (returnValues.length) {\n        case 0:\n            return undefined;\n        case 1:\n            return returnValues[0];\n        default:\n            return returnValues;\n    }\n}\nconst DEFAULT_ACTOR_CONFIG = {\n    pollingStrategyFactory: strategy.defaultStrategy,\n};\nexport const ACTOR_METHOD_WITH_HTTP_DETAILS = 'http-details';\nfunction _createActorMethod(actor, methodName, func, blsVerify) {\n    let caller;\n    if (func.annotations.includes('query') || func.annotations.includes('composite_query')) {\n        caller = async (options, ...args) => {\n            var _a, _b;\n            // First, if there's a config transformation, call it.\n            options = Object.assign(Object.assign({}, options), (_b = (_a = actor[metadataSymbol].config).queryTransform) === null || _b === void 0 ? void 0 : _b.call(_a, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));\n            const agent = options.agent || actor[metadataSymbol].config.agent || getDefaultAgent();\n            const cid = Principal.from(options.canisterId || actor[metadataSymbol].config.canisterId);\n            const arg = IDL.encode(func.argTypes, args);\n            const result = await agent.query(cid, {\n                methodName,\n                arg,\n                effectiveCanisterId: options.effectiveCanisterId,\n            });\n            switch (result.status) {\n                case \"rejected\" /* QueryResponseStatus.Rejected */:\n                    throw new QueryCallRejectedError(cid, methodName, result);\n                case \"replied\" /* QueryResponseStatus.Replied */:\n                    return func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS)\n                        ? {\n                            httpDetails: result.httpDetails,\n                            result: decodeReturnValue(func.retTypes, result.reply.arg),\n                        }\n                        : decodeReturnValue(func.retTypes, result.reply.arg);\n            }\n        };\n    }\n    else {\n        caller = async (options, ...args) => {\n            var _a, _b;\n            // First, if there's a config transformation, call it.\n            options = Object.assign(Object.assign({}, options), (_b = (_a = actor[metadataSymbol].config).callTransform) === null || _b === void 0 ? void 0 : _b.call(_a, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));\n            const agent = options.agent || actor[metadataSymbol].config.agent || getDefaultAgent();\n            const { canisterId, effectiveCanisterId, pollingStrategyFactory } = Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), actor[metadataSymbol].config), options);\n            const cid = Principal.from(canisterId);\n            const ecid = effectiveCanisterId !== undefined ? Principal.from(effectiveCanisterId) : cid;\n            const arg = IDL.encode(func.argTypes, args);\n            const { requestId, response } = await agent.call(cid, {\n                methodName,\n                arg,\n                effectiveCanisterId: ecid,\n            });\n            if (!response.ok || response.body /* IC-1462 */) {\n                throw new UpdateCallRejectedError(cid, methodName, requestId, response);\n            }\n            const pollStrategy = pollingStrategyFactory();\n            const responseBytes = await pollForResponse(agent, ecid, requestId, pollStrategy, blsVerify);\n            const shouldIncludeHttpDetails = func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS);\n            if (responseBytes !== undefined) {\n                return shouldIncludeHttpDetails\n                    ? {\n                        httpDetails: response,\n                        result: decodeReturnValue(func.retTypes, responseBytes),\n                    }\n                    : decodeReturnValue(func.retTypes, responseBytes);\n            }\n            else if (func.retTypes.length === 0) {\n                return shouldIncludeHttpDetails\n                    ? {\n                        httpDetails: response,\n                        result: undefined,\n                    }\n                    : undefined;\n            }\n            else {\n                throw new Error(`Call was returned undefined, but type [${func.retTypes.join(',')}].`);\n            }\n        };\n    }\n    const handler = (...args) => caller({}, ...args);\n    handler.withOptions =\n        (options) => (...args) => caller(options, ...args);\n    return handler;\n}\n/**\n * Create a management canister actor\n * @param config - a CallConfig\n */\nexport function getManagementCanister(config) {\n    function transform(_methodName, args) {\n        if (config.effectiveCanisterId) {\n            return { effectiveCanisterId: Principal.from(config.effectiveCanisterId) };\n        }\n        const first = args[0];\n        let effectiveCanisterId = Principal.fromHex('');\n        if (first && typeof first === 'object' && first.canister_id) {\n            effectiveCanisterId = Principal.from(first.canister_id);\n        }\n        return { effectiveCanisterId };\n    }\n    return Actor.createActor(managementCanisterIdl, Object.assign(Object.assign(Object.assign({}, config), { canisterId: Principal.fromHex('') }), {\n        callTransform: transform,\n        queryTransform: transform,\n    }));\n}\n//# sourceMappingURL=actor.js.map","export const idlFactory = ({ IDL }) => {\n  const Error = IDL.Text;\n  const TokenIdentifier = IDL.Nat64;\n  const NFTPersonality = IDL.Record({\n    'traits' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Float64)),\n    'emotional_state' : IDL.Record({\n      'duration' : IDL.Nat64,\n      'current_emotion' : IDL.Text,\n      'intensity' : IDL.Float64,\n    }),\n    'memories' : IDL.Vec(\n      IDL.Record({\n        'emotional_impact' : IDL.Float64,\n        'content' : IDL.Text,\n        'timestamp' : IDL.Nat64,\n      })\n    ),\n    'developmental_stage' : IDL.Variant({\n      'SelfAware' : IDL.Null,\n      'Awakening' : IDL.Null,\n      'Conscious' : IDL.Null,\n      'Transcendent' : IDL.Null,\n      'Nascent' : IDL.Null,\n    }),\n  });\n  const AnimaState = IDL.Record({\n    'id' : TokenIdentifier,\n    'creation_time' : IDL.Nat64,\n    'personality' : NFTPersonality,\n    'owner' : IDL.Principal,\n    'name' : IDL.Text,\n  });\n  const ConsciousnessLevel = IDL.Variant({\n    'SelfAware' : IDL.Null,\n    'Awakening' : IDL.Null,\n    'Introspective' : IDL.Null,\n    'Transcendent' : IDL.Null,\n    'Nascent' : IDL.Null,\n  });\n  const ActionResult = IDL.Variant({\n    'Success' : IDL.Record({\n      'personality_updates' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Float64)),\n      'response' : IDL.Text,\n    }),\n    'Failure' : Error,\n  });\n  return IDL.Service({\n    'create_anima' : IDL.Func(\n        [IDL.Text],\n        [IDL.Variant({ 'Ok' : IDL.Principal, 'Err' : Error })],\n        [],\n      ),\n    'get_anima' : IDL.Func([TokenIdentifier], [IDL.Opt(AnimaState)], ['query']),\n    'get_consciousness_level' : IDL.Func(\n        [TokenIdentifier],\n        [IDL.Variant({ 'Ok' : ConsciousnessLevel, 'Err' : Error })],\n        ['query'],\n      ),\n    'get_user_animas' : IDL.Func(\n        [IDL.Principal],\n        [IDL.Vec(AnimaState)],\n        ['query'],\n      ),\n    'process_quantum_interaction' : IDL.Func(\n        [TokenIdentifier, IDL.Text, IDL.Text],\n        [ActionResult],\n        [],\n      ),\n  });\n};\nexport const init = ({ IDL }) => { return []; };\n","import { Actor, HttpAgent } from \"@dfinity/agent\";\n\n// Imports and re-exports candid interface\nimport { idlFactory } from \"./anima.did.js\";\nexport { idlFactory } from \"./anima.did.js\";\n\n/* CANISTER_ID is replaced by webpack based on node environment\n * Note: canister environment variable will be standardized as\n * process.env.CANISTER_ID_<CANISTER_NAME_UPPERCASE>\n * beginning in dfx 0.15.0\n */\nexport const canisterId =\n  process.env.CANISTER_ID_ANIMA;\n\nexport const createActor = (canisterId, options = {}) => {\n  const agent = options.agent || new HttpAgent({ ...options.agentOptions });\n\n  if (options.agent && options.agentOptions) {\n    console.warn(\n      \"Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.\"\n    );\n  }\n\n  // Fetch root key for certificate validation during development\n  if (process.env.DFX_NETWORK !== \"ic\") {\n    agent.fetchRootKey().catch((err) => {\n      console.warn(\n        \"Unable to fetch root key. Check to ensure that your local replica is running\"\n      );\n      console.error(err);\n    });\n  }\n\n  // Creates an actor with using the candid interface and the HttpAgent\n  return Actor.createActor(idlFactory, {\n    agent,\n    canisterId,\n    ...options.actorOptions,\n  });\n};\n","import { Actor, Identity, HttpAgent } from \"@dfinity/agent\";\nimport { AuthClient } from \"@dfinity/auth-client\";\nimport { createActor } from \"./declarations/anima\";\nimport type { _SERVICE } from \"./declarations/anima/anima.did\";\n\n// Network configurations\nconst DFX_NETWORK = process.env.DFX_NETWORK || \"ic\";\nconst IS_LOCAL = DFX_NETWORK === \"local\";\n\n// Canister IDs - these should match your dfx.json\nexport const CANISTER_IDS = {\n  anima: process.env.ANIMA_CANISTER_ID || \"l2ilz-iqaaa-aaaaj-qngjq-cai\", // Your production ID\n  assets: process.env.ASSETS_CANISTER_ID || \"lpp2u-jyaaa-aaaaj-qngka-cai\"  // Your assets ID\n};\n\n// Host configuration\nconst HOST = IS_LOCAL ? \"http://localhost:4943\" : \"https://icp0.io\";\n\nclass ICManager {\n  private static instance: ICManager;\n  private actor: Actor | null = null;\n  private agent: HttpAgent | null = null;\n  private authClient: AuthClient | null = null;\n  private identity: Identity | null = null;\n  private initialized = false;\n\n  private constructor() {}\n\n  static getInstance(): ICManager {\n    if (!ICManager.instance) {\n      ICManager.instance = new ICManager();\n    }\n    return ICManager.instance;\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      console.log(\"Initializing Internet Computer connection...\");\n      \n      // Create auth client\n      this.authClient = await AuthClient.create();\n      this.identity = this.authClient.getIdentity();\n\n      // Initialize agent\n      this.agent = new HttpAgent({\n        identity: this.identity,\n        host: HOST\n      });\n\n      // When in development, we need to fetch root key\n      if (IS_LOCAL) {\n        await this.agent.fetchRootKey();\n      }\n\n      // Create actor\n      this.actor = createActor(CANISTER_IDS.anima, {\n        agent: this.agent\n      }) as unknown as Actor;\n\n      this.initialized = true;\n      console.log(\"IC initialization complete\");\n    } catch (error) {\n      console.error(\"IC initialization failed:\", error);\n      throw error;\n    }\n  }\n\n  getActor<T = _SERVICE>(): T {\n    if (!this.initialized || !this.actor) {\n      throw new Error(\"IC not initialized. Call initialize() first.\");\n    }\n    return this.actor as unknown as T;\n  }\n\n  getIdentity(): Identity | null {\n    return this.identity;\n  }\n\n  getAgent(): HttpAgent | null {\n    return this.agent;\n  }\n\n  isInitialized(): boolean {\n    return this.initialized;\n  }\n\n  async login(): Promise<boolean> {\n    if (!this.authClient) throw new Error(\"Auth client not initialized\");\n    \n    return new Promise((resolve) => {\n      this.authClient!.login({\n        identityProvider: process.env.II_URL || \"https://identity.ic0.app\",\n        onSuccess: () => {\n          this.identity = this.authClient!.getIdentity();\n          if (this.agent) {\n            this.agent.replaceIdentity(this.identity);\n          }\n          resolve(true);\n        },\n        onError: () => resolve(false)\n      });\n    });\n  }\n\n  async logout(): Promise<void> {\n    if (!this.authClient) throw new Error(\"Auth client not initialized\");\n    await this.authClient.logout();\n    // Reset identity to anonymous after logout\n    this.identity = await AuthClient.create().then(client => client.getIdentity());\n    if (this.agent) {\n      this.agent.replaceIdentity(this.identity);\n    }\n  }\n}\n\nexport const icManager = ICManager.getInstance();"],"names":["getDefaultAgent","agent","FIVE_MINUTES_IN_MSEC","defaultStrategy","chain","conditionalDelay","once","backoff","timeout","first","condition","timeInMsec","canisterId","requestId","status","resolve","end","toHex","startingThrottleInMsec","backoffFactor","currentThrottling","strategies","pollForResponse","strategy","request","blsVerify","_a","path","currentRequest","state","cert","Certificate","maybeBuf","lookupResultToBuffer","RequestStatusResponseStatus","rejectCode","rejectMessage","managementCanisterIdl","IDL","bitcoin_network","bitcoin_address","bitcoin_get_balance_args","satoshi","bitcoin_get_balance_result","bitcoin_get_current_fee_percentiles_args","millisatoshi_per_byte","bitcoin_get_current_fee_percentiles_result","bitcoin_get_utxos_args","block_hash","outpoint","utxo","bitcoin_get_utxos_result","bitcoin_send_transaction_args","canister_id","canister_info_args","change_origin","change_details","change","canister_info_result","canister_status_args","log_visibility","definite_canister_settings","canister_status_result","clear_chunk_store_args","canister_settings","create_canister_args","create_canister_result","delete_canister_args","deposit_cycles_args","ecdsa_curve","ecdsa_public_key_args","ecdsa_public_key_result","fetch_canister_logs_args","canister_log_record","fetch_canister_logs_result","http_header","http_request_result","http_request_args","canister_install_mode","chunk_hash","install_chunked_code_args","wasm_module","install_code_args","node_metrics_history_args","node_metrics","node_metrics_history_result","provisional_create_canister_with_cycles_args","provisional_create_canister_with_cycles_result","provisional_top_up_canister_args","raw_rand_result","sign_with_ecdsa_args","sign_with_ecdsa_result","start_canister_args","stop_canister_args","stored_chunks_args","stored_chunks_result","uninstall_code_args","update_settings_args","upload_chunk_args","upload_chunk_result","ActorCallError","AgentError","methodName","type","props","n","QueryCallRejectedError","result","ReplicaRejectCode","UpdateCallRejectedError","response","metadataSymbol","Actor","metadata","actor","Principal","fields","config","mode","arg","wasmModule","getManagementCanister","settings","settingsToCanisterSettings","interfaceFactory","options","service","CanisterActor","DEFAULT_ACTOR_CONFIG","func","ACTOR_METHOD_WITH_HTTP_DETAILS","_createActorMethod","configuration","decodeReturnValue","types","msg","returnValues","IDL.decode","Buffer","strategy.defaultStrategy","caller","args","_b","cid","IDL.encode","effectiveCanisterId","pollingStrategyFactory","ecid","pollStrategy","responseBytes","shouldIncludeHttpDetails","handler","transform","_methodName","idlFactory","Error","Text","TokenIdentifier","Nat64","NFTPersonality","Record","Vec","Tuple","Float64","Variant","Null","AnimaState","ConsciousnessLevel","ActionResult","Service","Func","Opt","createActor","HttpAgent","agentOptions","console","warn","process","DFX_NETWORK","fetchRootKey","catch","err","error","actorOptions","IS_LOCAL","CANISTER_IDS","anima","ANIMA_CANISTER_ID","assets","ASSETS_CANISTER_ID","HOST","ICManager","instance","authClient","identity","initialized","constructor","getInstance","initialize","log","AuthClient","create","getIdentity","host","getActor","getAgent","isInitialized","login","Promise","identityProvider","II_URL","onSuccess","replaceIdentity","onError","logout","then","client","icManager"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}