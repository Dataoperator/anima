type BatchId = nat;
type ChunkId = nat;
type Key = text;
type Time = int;

type CreateAssetArguments = record {
  key: Key;
  content_type: text;
  max_age: opt nat64;
  headers: opt vec record { text; text; };
};

type SetAssetContentArguments = record {
  key: Key;
  sha256: opt blob;
  chunk_ids: vec ChunkId;
  content_encoding: text;
};

type BatchOperationKind = variant {
  CreateAsset: CreateAssetArguments;
  SetAssetContent: SetAssetContentArguments;
  UnsetAssetContent: record { key: Key; };
  DeleteAsset: record { key: Key; };
  Clear: record {};
};

type HeaderField = record { text; text; };

service : {
  authorize: (principal) -> ();
  clear: () -> ();
  commit_batch: (record {
    batch_id: BatchId;
    operations: vec BatchOperationKind;
  }) -> ();
  create_asset: (CreateAssetArguments) -> ();
  create_batch: () -> (BatchId);
  create_chunk: (record { batch_id: BatchId; content: blob; }) -> (ChunkId);
  delete_asset: (Key) -> ();
  get: (record { 
    key: Key;
    accept_encodings: vec text;
  }) -> (record {
    content: blob;
    content_type: text;
    content_encoding: text;
    total_length: nat;
    sha256: opt blob;
  }) query;
  get_chunk: (record {
    key: Key;
    sha256: opt blob;
    index: nat;
    content_encoding: text;
  }) -> (record { content: blob; }) query;
  http_request: (record {
    method: text;
    url: text;
    headers: vec HeaderField;
    body: blob;
  }) -> (record {
    status_code: nat16;
    headers: vec HeaderField;
    body: blob;
    streaming_strategy: opt variant {
      Callback: record {
        token: record {
          key: Key;
          sha256: opt blob;
          index: nat;
          content_encoding: text;
        };
        callback: func (record {
          key: Key;
          sha256: opt blob;
          index: nat;
          content_encoding: text;
        }) -> (record { content: blob; }) query;
      };
    };
  }) query;
  http_request_streaming_callback: (record {
    key: Key;
    sha256: opt blob;
    index: nat;
    content_encoding: text;
  }) -> (record { content: blob; }) query;
  list: () -> (vec record {
    key: Key;
    content_type: text;
    encodings: vec record {
      content_encoding: text;
      sha256: opt blob;
      length: nat;
      modified: Time;
    };
  }) query;
  set_asset_content: (SetAssetContentArguments) -> ();
  store: (record {
    key: Key;
    content_type: text;
    content_encoding: text;
    content: blob;
    sha256: opt blob;
  }) -> ();
  unset_asset_content: (Key) -> ();
}